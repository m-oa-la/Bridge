@model IEnumerable<BridgeMVC.Models.Product>

@{
    /**/

    Layout = "~/Views/Shared/_LayoutM3TaskStandard.cshtml";
    Layout = null;
    var sn = 0;
    var Job = ViewBag.Job;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    string bridgeModule = (string)Session["BridgeModule"];
}


<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bridge</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")

    <style>
        body {
            font: Avenir Next;
        }

        table, tr {
            border-style: hidden;
        }

        .control-label {
            font-weight: bold;
        }
    </style>
</head>

@if (bridgeModule != "M3")
{
    <h4 style="margin-top:1px" > <span style="float:right; padding-right:4em"> @Html.ActionLink("Add New", "Create")</span></h4>
}
else
{
    <h4 style="margin-top:1px" id="refreshPTP">
        <span style="float:right; padding-right:4em">
            @Html.ActionLink(
                linkText: "REFRESH",
                actionName: "RefreshPTP",
                controllerName: "Product",
                routeValues: new {
                    bridgeJobId = Model.FirstOrDefault().DbJobId,
                },
        htmlAttributes: null
    )
        </span></h4>
}

<tr></tr>
@foreach (var item in Model)
{
    sn = sn + 1;
    string classStr = "form-control ptp " + item.Id;
    int paraSN = 0;

    <h4 style="font-weight:bold" class="col-lg-12">Product (@sn):</h4>
    foreach (var para in item.PTPs)
    {
        string classStr2 = classStr + " " + paraSN;
    <div class="form-group">
        <div class="bing col-lg-6">
            <p style="font-weight:bold"> @para.TechParaName</p>
            <p>
                @Html.EditorFor(model => para.TechParaValue, new { htmlAttributes = new { @class = classStr2 } })
                @Html.ValidationMessageFor(model => para.TechParaValue, "", new { @class = "text-danger" })
            </p>
        </div>
    </div>
        paraSN = paraSN + 1;
    }

    <hr />
}





<script>

    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var Job = @Html.Raw(Json.Encode(Job));
    var sn = @sn;
    console.log(sn);
    var bm = "@bridgeModule";

    var subProdDropdowns = $('*[id^="selectSubProdType"]');
    for (index = 0; index < subProdDropdowns.length; ++index) {
        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == "LifeLife-Saving appliances") {
                subProdDropdowns[index].append(new Option(data.ListItem, data.ListItem));
            }
        });

        subProdDropdowns[index].append(new Option("All", "All"));

    };

    $("input").on('change', function () {
        //if class contains ptp, then save prod data
        var ret = $(this).attr("class").split(" ")
        if (ret[1] == "ptp") {
            var prodid = ret[2];
            var ptpid = ret[3];
            var ptpval = $(this).val();

            callSavePTPApi(prodid, ptpid, ptpval);
        }
    });



    function callSavePTPApi(prodid, ptpid, ptpval) {

        return $.ajax({
            type: 'POST',
            url: '/Product/SavePTP/',
            data: { ProdId: prodid, PTPId: ptpid, PTPVal: ptpval },
            cache: false,
            success: {

            }
        });
    }

</script>
