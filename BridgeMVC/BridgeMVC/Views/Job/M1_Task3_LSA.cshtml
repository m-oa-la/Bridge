@model BridgeMVC.Models.Job
@{
    Layout = null;
    ViewBag.Title = "M1_Task1";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    string SF = (string)Session["SendingFlag"];

    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;
}

<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bridge</title>

    @Styles.Render("~/Content/css", "~/Content/m1_styles/m1_task3_lsa.css")

    @Scripts.Render("~/bundles/modernizr")
    <script language="JavaScript" type="text/javascript" src="~/Scripts/jquery-3.3.1.min.js"></script>
    <script language="JavaScript" type="text/javascript" src="~/Scripts/jquery-ui.min.js"></script>
    <script language="JavaScript" type="text/javascript" src="~/Scripts/bridgeScript.js"></script>
    <link href="~/Content/jCalendar.css" type="text/css" rel="stylesheet">
    <script type="text/javascript" src="~/Scripts/jCalendar.js"></script>

    @*
    @{
        ViewBag.Title = "Bridge_M1";
        string BridgeLastUsed = (string)Session["BridgeModule"];
    }
    *@

    <style>

        body {
            font: Avenir Next;
            margin-left: 60px;
            margin-right: 60px;
            /*min-width:1600px;*/
        }

        .navbar {
            background-color: white;
            font-size: 16px;
        }

            .navbar a {
                color: black;
            }


        .navbar-collapse {
            background-color: cadetblue;
            color: white;
        }

        .dropbtn {
            background-color: white;
            color: #000000;
            padding: 16px;
            font-size: 16px;
            border: none;
        }

        .dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f1f1f1;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
        }

            .dropdown-content a {
                color: black;
                padding: 12px 16px;
                text-decoration: none;
                display: block;
            }

                .dropdown-content a:hover {
                    background-color: #ddd;
                }

        .dropdown:hover .dropdown-content {
            display: block;
        }

        .dropdown:hover .dropbtn {
            background-color: #3e8e41;
        }
    </style>
</head>



<body>
    <page size="A4">

        <div href="/"><img style="width:690px" src="~/Content/pictures/DNVGLLogo.PNG"></div>

        <h2>LSA Launching Appliances Checklist</h2>

        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
        {
            @Html.AntiForgeryToken()
            <div>
                @Html.HiddenFor(model => model.Tag)
                @Html.HiddenFor(model => model.BridgeModule)
                @Html.HiddenFor(model => model.Id)
                @Html.HiddenFor(model => model.NpsJobName)
                @*@Html.HiddenFor(model => model.NpsJobId)*@
                @*@Html.HiddenFor(model => model.TaskHandler)*@
                @Html.HiddenFor(model => model.Task1)
                @Html.HiddenFor(model => model.Task2)
                @Html.HiddenFor(model => model.Task3)
                @*@Html.HiddenFor(model => model.CustomerName)*@
                @*@Html.HiddenFor(model => model.ProdDescription)*@
                @*@Html.HiddenFor(model => model.ApprNote)*@
                @Html.HiddenFor(model => model.IsComplete)
                @*@Html.HiddenFor(model => model.SalesOrderNo)*@
                @Html.HiddenFor(model => model.SubOrderNo)
                @*@Html.HiddenFor(model => model.CertType)*@
                @*@Html.HiddenFor(model => model.CertAction)*@
                @*@Html.HiddenFor(model => model.MainProdType)*@
                @*@Html.HiddenFor(model => model.SubProdType)*@
                @Html.HiddenFor(model => model.ReceivedTime)
                @*@Html.HiddenFor(model => model.FeeSetTime)*@
                @Html.HiddenFor(model => model.IoraSentTime)
                @Html.HiddenFor(model => model.IoraReturnedTime)
                @Html.HiddenFor(model => model.JobCompletedTime)
                @*@Html.HiddenFor(model => model.CustomerName)
                    @Html.HiddenFor(model => model.CustomerId)*@
                @Html.HiddenFor(model => model.Fee)
                @Html.HiddenFor(model => model.BudgetHour)
                @*@Html.HiddenFor(model => model.FeeSetter)
                    @Html.HiddenFor(model => model.FeeVerifier)*@
                @Html.HiddenFor(model => model.JobVerifier)
                @Html.HiddenFor(model => model.RAE)
                @*@Html.HiddenFor(model => model.MWL)*@
                @*@Html.HiddenFor(model => model.ExistingCertNo)*@
                @*@Html.HiddenFor(model => model.CertNo)*@
                @*@Html.HiddenFor(model => model.SerialNo)*@
                @*@Html.HiddenFor(model => model.MEDItemNo)*@
                @Html.HiddenFor(model => model.DeliveryWeek)
                @Html.HiddenFor(model => model.LocalUnit)
                @Html.HiddenFor(model => model.ArchiveFolder)
                @Html.HiddenFor(model => model.IsHold)
                @Html.HiddenFor(model => model.StatusNote)
                @Html.HiddenFor(model => model.VerifyLvl)
                @Html.HiddenFor(model => model.SurveyDate)
                @*@Html.HiddenFor(model => model.SurveyStation)*@
                @Html.HiddenFor(model => model.TechPara1)
                @Html.HiddenFor(model => model.TechPara2)
                @Html.HiddenFor(model => model.TechPara3)
                @Html.HiddenFor(model => model.TechPara4)
                @Html.HiddenFor(model => model.MEDFactory)
                @*@Html.HiddenFor(model => model.MEDFBNo)*@
                @*@Html.HiddenFor(model => model.MEDFBDue)*@
                @Html.HiddenFor(model => model.AnyDesignChange)
                @Html.HiddenFor(model => model.ChecklistUsed)
                @Html.HiddenFor(model => model.DesignFolder)
                @Html.HiddenFor(model => model.IsDocQualityGood)
                @Html.HiddenFor(model => model.IsDocSufficient)
                @Html.HiddenFor(model => model.SetHoldTime)
                @Html.HiddenFor(model => model.IORASpentTime)
                @*@Html.HiddenFor(model => model.ModificationDesc)*@
                @Html.HiddenFor(model => model.OnHoldNote)
                @Html.HiddenFor(model => model.FeeVerifyTime)
                @Html.HiddenFor(model => model.RegisterTime)
                @Html.HiddenFor(model => model.DocReq)
                @Html.HiddenFor(model => model.NoOfCert)
                @Html.HiddenFor(model => model.FeeSet)
                @Html.HiddenFor(model => model.VesselID)
                @Html.HiddenFor(model => model.DocReqNote)
                @Html.HiddenFor(model => model.NpsDbId)
                @*@Html.HiddenFor(model => model.ExeDoneBy)
                    @Html.HiddenFor(model => model.ExeDoneTime)*@
                @Html.HiddenFor(model => model.CompletedBy)
                @Html.HiddenFor(model => model.SendingFlag)
                @Html.HiddenFor(model => model.IoraDbId)
                @Html.HiddenFor(model => model.InternalFee)
            </div>

            <div>
                <hr />

                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> NPS Job ID: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.NpsJobId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Customer Name: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Sales Order No.: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.SalesOrderNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Product name: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.ProdDescription, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Deliverable: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.CertType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Issuance Type: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.CertAction, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </span>
                </p>


                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Equipment main-category: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.MainProdType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Equipment sub-category: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.SubProdType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Ref. Cert. No.: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.MEDFBNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MEDFBNo, "", new { @class = "text-danger" })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Ref. deliverable no.: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.ExistingCertNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ExistingCertNo, "", new { @class = "text-danger" })
                    </span>
                </p>

                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Ref. cert. expire date.: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.MEDFBDue, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MEDFBDue, "", new { @class = "text-danger" })
                    </span>
                </p>

                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> MWL: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.MWL, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MWL, "", new { @class = "text-danger" })
                    </span>
                </p>

                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Amount of Certificate: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.CertAmount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CertAmount, "", new { @class = "text-danger" })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> MED Item No: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.MEDItemNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MEDItemNo, "", new { @class = "text-danger" })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Serial No.: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.SerialNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SerialNo, "", new { @class = "text-danger" })
                    </span>
                </p>
                <hr />
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> New ceritificate No.: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.CertNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CertNo, "", new { @class = "text-danger" })
                    </span>
                </p>
                <p class="col-lg-12">
                    <span class="col-lg-4 bName"> Survey station: </span>
                    <span class="col-lg-8">
                        @Html.EditorFor(model => model.SurveyStation, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SurveyStation, "", new { @class = "text-danger" })
                    </span>
                </p>
                <p class=" col-lg-12">
                    <span class="bName col-lg-4">
                        Survey date: (DD/MM/YYYY)
                        <img onclick="viewCalendar('jcalendar_parent', 'SurveyDate')" style="margin-top: 5px;" width="20" height="20" src="~/Content/pictures/calendar-32x32.png" alt="CAL" border="0" class="no-print">
                    </span>
                    <span id="jcalendar_parent" class="jcalendar_parent" style="z-index: 999"></span>
                    <span class="col-lg-8">
                        <input class="form-control" name="SurveyDate_Input" value="@Model.SurveyDate" id="SurveyDate_Input" readonly />
                    </span>
                </p>

                <p class="col-lg-12">
                    <span class="bName col-lg-4">
                        Scope of modification:
                    </span>
                    <span>
                        @Html.EditorFor(model => model.ModificationDesc, new { htmlAttributes = new { @class = "form-control", style = "height:60px" } })
                        @Html.ValidationMessageFor(model => model.ModificationDesc, "", new { @class = "text-danger" })

                    </span>
                </p>

                <p class="col-lg-12">
                    <span class="bName col-lg-4">
                        Internal approval note:
                    </span>
                    <span>
                        @Html.EditorFor(model => model.ApprNote, new { htmlAttributes = new { @class = "form-control", style = "height:auto" } })
                        @Html.ValidationMessageFor(model => model.ApprNote, "", new { @class = "text-danger" })
                    </span>
                </p>


                <div></div>

                <iframe id="iframe1" frameborder="0" src="@Url.Content("~/Rule/IndexReadOnly")" style="width: 100%; height: 100px;" height: 100px;" scrolling="no" onload="resizeIframe(this)"></iframe>
                <div></div>
                <iframe id="iframe2" frameborder="0" src="@Url.Content("~/TechChecklist/Index")" style="width: 100%; height: 100px;" scrolling="no" onload="resizeIframe(this)"></iframe>

                <div id="sigatures">
                    <hr />

                    <p class="bName"> RAE: _____________  &nbsp  Date:________________ &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Verifier : _____________  &nbsp  Date:________________</p>
                </div>

                <div class="bing col-lg-6" hidden>
                    Fee setter
                    @Html.EditorFor(model => model.FeeSetter, new { htmlAttributes = new { @class = "form-control", id = "feeSetter" } })
                    @Html.EditorFor(model => model.FeeSetTime, new { htmlAttributes = new { @class = "form-control", id = "feeSetTime", @Value = Model.FeeSetTime?.ToString("dd-MM-yyyy HH:mm:ss") } })
                    @Html.EditorFor(model => model.TaskHandler, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.EditorFor(model => model.ExeDoneBy, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.EditorFor(model => model.ExeDoneTime, new { htmlAttributes = new { @class = "form-control" } })
                </div>

                <div class="no-print">
                    @{
                        Html.RenderPartial("_SaveCompleteReopen");
                        Html.RenderPartial("_TaskSending");
                    }
                </div>
            </div>
        }
        <hr />
        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
        }
    </page>
</body>

@Html.ValidationSummary()
<script>
    // Read viewbag info
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));
    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    // Set task parameter
    var taskNo = 3;
    var taskStatusFlag = "ExeDoneBy"; //who completed the task
    var taskCompleteDate = "ExeDoneTime";
    var taskCompleteStr = "The job is executed by ";

    // Scripts/bridgeScript.js
    renderTaskShowHide();
    renderTaskHandling();

    // Show hide fields
    showHideFields();

    function showHideFields()
    {

        var defaultHiddenList = "MEDFBNo,MEDFBDue,SerialNo,CertAmount,MWL,MEDItemNo,ExistingCertNo,SurveyStation,SurveyDate_Input,ModificationDesc".split(',');
        defaultHiddenList.forEach(hideElement);

        var toShow = "";

        switch (Job.CertType) {
            case "MED-F":
                toShow += "MEDFBNo,MEDFBDue,SerialNo,CertAmount,MEDItemNo,SurveyStation,SurveyDate_Input,";
                $("#pMEDFBNo").html("Ref. MED-B certificate No.");
                $("#selectCertAction").val("Initial");
                $("#selectMainProdType").val("Life-Saving appliances");
                $("#selectSubProdType").append(new Option("Module F certification", "Module F certification"));
                $("#selectSubProdType").val("Module F certification");
                document.getElementById("signatures").style.display = "none";
                //$("#SubProdType").val("Module F certification");
                break;
            case "MED-G":
                toShow += "SerialNo,MWL,MEDItemNo,SurveyStation,SurveyDate_Input,";
                break;
            case "MED-B":
                 toShow += "MWL,MEDItemNo,SurveyStation,SurveyDate_Input,";
                break;
            case "TA":
                toShow += "MWL,SurveyStation,SurveyDate_Input,";
                break;
            case "DVR":
                toShow += "SerialNo,MWL,";
                break;
            case "MED-D":
                toShow += "MWL,SurveyStation,SurveyDate_Input,";
                break;
            default:
                toShow += "";
        }

        switch (Job.CertAction) {
            case "Modification":
                toShow += "ExistingCertNo,ModificationDesc,";
                break;
            case "Initial with reference":
                toShow += "ExistingCertNo,";
                break;
            case "Renewal with modification":
                toShow += "ExistingCertNo,ModificationDesc,";
                break;
            case "Renewal":
                toShow += "ExistingCertNo,";
                break;
            default:
                toShow += "";
        }

        if (toShow) {
            var splitS = toShow.split(',');
            splitS.forEach(showElement);
        }
     }

    function showElement(value) {
        if (value) {
            document.getElementById(value).parentNode.parentNode.style.display = "block";
        }
    }

    function hideElement(value) {
        if (value) {
            document.getElementById(value).parentNode.parentNode.style.display = "none";
        }
    }

    //$("#selectCertType").change();

    $("#selectCertType").on("change", function () {
        showHideFields()
    });
    $("#selectCertAction").on("change", function () {
        showHideFields()
    });

    //set up select list
    $.each(LCertType, function (key, data) {
        $("#selectCertType").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LCertAction, function (key, data) {
        $("#selectCertAction").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LMainProdType, function (key, data) {
        $("#selectMainProdType").append(new Option(data.ListItem, data.ListItem));
    });

    var mval = $("#selectMainProdType :selected").text();
      $.each(LSubProdType, function (key, data) {
        if (data.UpperLvl == mval) {
            $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
        }
    });

    //When main prodtype changes, refesh the sub prod type.
    $("#selectMainProdType").on("change", function () {
        var mval = $("#selectMainProdType :selected").text();

        $('#selectSubProdType option').each(function () {
            if ($(this).val() != 'X') {
                $(this).remove();
            }
        });

        $("#selectSubProdType option").remove();
        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == mval) {
                $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
            }
        });
    });

    function resizeIframe(obj) {
        obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
    }

</script>