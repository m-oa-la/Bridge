@model BridgeMVC.Models.Job

@{
    Layout = "~/Views/Shared/_LayoutM1TaskA4.cshtml";
    ViewBag.Title = "M1_Task3";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    string SF = (string)Session["SendingFlag"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;
}

<div href="/">
    <img style="width:600px" src="~/Content/pictures/DNVGLLogo.PNG">
</div>
<h2> LSA Launching Appliances Checklist </h2>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()

    <p class="col-lg-12" id="paraNpsJobId">
        <span class="col-lg-4 bName">NPS Job ID:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.NpsJobId, 
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12" id="paraCustomerName">
        <span class="col-lg-4 bName">Customer Name:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CustomerName,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12" id="paraSalesOrderNo">
        <span class="col-lg-4 bName">Sales Order No.:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.SalesOrderNo,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12" id="paraProdDescription">
        <span class="col-lg-4 bName">Product Name:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.ProdDescription,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12" id="paraCertType">
        <span class="col-lg-4 bName">Deliverable:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CertType,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12" id="paraCertAction">
        <span class="col-lg-4 bName">Issuance Type:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CertAction,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12" id="paraMainProdType">
        <span class="col-lg-4 bName">Equipment main-category:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MainProdType,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12" id="paraSubProdType">
        <span class="col-lg-4 bName">Equipment sub-category:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.SubProdType,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12" id="paraMEDFBNo">
        <span class="col-lg-4 bName">Ref.Cert.No.:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MEDFBNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDFBNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12" id="paraExistingCertNo">
        <span class="col-lg-4 bName">Ref.Deliverable No.:</span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.ExistingCertNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ExistingCertNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12" id="paraMEDFBDue">
        <span class="col-lg-4 bName">Ref.Cert.Expire Date: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MEDFBDue,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDFBDue,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12" id="paraMWL">
        <span class="col-lg-4 bName"> MWL: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MWL,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MWL,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12" id="paraCertAmount">
        <span class="col-lg-4 bName"> Amount of Certificate: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CertAmount,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CertAmount,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12" id="paraMEDItemNo">
        <span class="col-lg-4 bName"> MED Item No: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MEDItemNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDItemNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12" id="paraSerialNo">
        <span class="col-lg-4 bName"> Serial No.: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.SerialNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SerialNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12" id="paraCertNo">
        <span class="col-lg-4 bName"> New ceritificate No.: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CertNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CertNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12" id="paraSurveyStation">
        <span class="col-lg-4 bName"> Survey station: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.SurveyStation,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SurveyStation,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class=" col-lg-12" id="paraSurveyDate">
        <span class="bName col-lg-4">
            Survey date: (DD/MM/YYYY)
            <img onclick="viewCalendar('jcalendar_parent', 'SurveyDate')" style="margin-top: 5px;" width="20" height="20" src="~/Content/pictures/calendar-32x32.png" alt="CAL" border="0" class="no-print">
        </span>
        <span id="jcalendar_parent" class="jcalendar_parent" style="z-index: 999"></span>
        <span class="col-lg-8">
            <input class="form-control" name="SurveyDate_Input" value="@Model.SurveyDate" id="SurveyDate_Input" readonly />
        </span>
    </p>
    <p class="col-lg-12" id="paraModificationDesc">
        <span class="bName col-lg-4">
            Scope of modification:
        </span>
        <span>
            @Html.EditorFor(model => model.ModificationDesc,
                new { htmlAttributes = new { @class = "form-control", style = "height: 200px; width: 100%; resize none;" } })
            @Html.ValidationMessageFor(model => model.ModificationDesc,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12" id="paraApprNote">
        <span class="bName col-lg-4">
            Internal approval note:
        </span>
        <span>
            @Html.EditorFor(model => model.ApprNote,
                new { htmlAttributes = new { @class = "form-control", style = "height:200px;width:100%" } })
            @Html.ValidationMessageFor(model => model.ApprNote,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <div></div>
    <iframe id="iframe1" frameborder="0" src="@Url.Content("~/Rule/IndexReadOnly")" style="width: 100%; height: 100px;" height: 100px;" scrolling="no" onload="resizeIframe(this)"></iframe>
    <iframe id="iframe2" frameborder="0" src="@Url.Content("~/TechChecklist/Index")" style="width: 100%; height: 100px;" scrolling="no" onload="resizeIframe(this)"></iframe>
    <div id="signatures">
        <p class="bName"> RAE: _____________  &nbsp Date:________________ &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Verifier : _____________  &nbsp Date:________________</p>
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.FeeSetter,
            new { htmlAttributes = new { @class = "form-control", id = "feeSetter" } });
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.FeeSetTime,
            new { htmlAttributes = new { @class = "form-control", id = "feeSetTime", @Value = Model.FeeSetTime?.ToString("dd-MM-yyyy HH:mm:ss") } });
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.TaskHandler,
            new { htmlAttributes = new { @class = "form-control", id = "taskHandler" } });
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.ExeDoneBy,
            new { htmlAttributes = new { @class = "form-control", id = "ExeDoneBy" } });
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.ExeDoneTime,
            new { htmlAttributes = new { @class = "form-control", id = "ExeDoneTime" } });
    </div>
    <div class="no-print">
        @{
            Html.RenderPartial("_PartialM1JobHiddenAttributes");
            Html.RenderPartial("_SaveCompleteReopen");
            Html.RenderPartial("_TaskSending");
        }
    </div>
}


@Html.ValidationSummary()

@section scripts{
<script>
    // Read viewbag info
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));
    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    // Set task parameter
    var taskNo = 3;
    var taskStatusFlag = "ExeDoneBy"; //who completed the task
    var taskCompleteDate = "ExeDoneTime";
    var taskCompleteStr = "The job is executed by ";

    // Initial rendering
    renderLSAParagraphs(Job.CertType, Job.CertAction);
    renderTaskActions(taskNo, taskStatusFlag, taskCompleteDate, taskCompleteStr, userSignature);
    renderTaskHandling(LUser, bm);
</script>
}

@section Styles{
}