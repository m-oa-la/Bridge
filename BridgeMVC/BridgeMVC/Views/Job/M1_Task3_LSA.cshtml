@model BridgeMVC.Models.Job

@{
    Layout = "~/Views/Shared/_LayoutM1TaskA4.cshtml";
    ViewBag.Title = "M1_Task3";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    string SF = (string)Session["SendingFlag"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;
}

<div href="/">
    <img style="width:600px" src="~/Content/pictures/DNVGLLogo.PNG">
</div>
<h2> LSA Launching Appliances Checklist </h2>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()
    <div>
        @Html.HiddenFor(model => model.Tag)
        @Html.HiddenFor(model => model.BridgeModule)
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.NpsJobName)
        @*@Html.HiddenFor(model => model.NpsJobId)*@
        @*@Html.HiddenFor(model => model.TaskHandler)*@
        @Html.HiddenFor(model => model.Task1)
        @Html.HiddenFor(model => model.Task2)
        @Html.HiddenFor(model => model.Task3)
        @*@Html.HiddenFor(model => model.CustomerName)*@
        @*@Html.HiddenFor(model => model.ProdDescription)*@
        @*@Html.HiddenFor(model => model.ApprNote)*@
        @Html.HiddenFor(model => model.IsComplete)
        @*@Html.HiddenFor(model => model.SalesOrderNo)*@
        @Html.HiddenFor(model => model.SubOrderNo)
        @*@Html.HiddenFor(model => model.CertType)*@
        @*@Html.HiddenFor(model => model.CertAction)*@
        @*@Html.HiddenFor(model => model.MainProdType)*@
        @*@Html.HiddenFor(model => model.SubProdType)*@
        @Html.HiddenFor(model => model.ReceivedTime)
        @*@Html.HiddenFor(model => model.FeeSetTime)*@
        @Html.HiddenFor(model => model.IoraSentTime)
        @Html.HiddenFor(model => model.IoraReturnedTime)
        @Html.HiddenFor(model => model.JobCompletedTime)
        @*@Html.HiddenFor(model => model.CustomerName)
            @Html.HiddenFor(model => model.CustomerId)*@
        @Html.HiddenFor(model => model.Fee)
        @Html.HiddenFor(model => model.BudgetHour)
        @*@Html.HiddenFor(model => model.FeeSetter)
            @Html.HiddenFor(model => model.FeeVerifier)*@
        @Html.HiddenFor(model => model.JobVerifier)
        @Html.HiddenFor(model => model.RAE)
        @*@Html.HiddenFor(model => model.MWL)*@
        @*@Html.HiddenFor(model => model.ExistingCertNo)*@
        @*@Html.HiddenFor(model => model.CertNo)*@
        @*@Html.HiddenFor(model => model.SerialNo)*@
        @*@Html.HiddenFor(model => model.MEDItemNo)*@
        @Html.HiddenFor(model => model.DeliveryWeek)
        @Html.HiddenFor(model => model.LocalUnit)
        @Html.HiddenFor(model => model.ArchiveFolder)
        @Html.HiddenFor(model => model.IsHold)
        @Html.HiddenFor(model => model.StatusNote)
        @Html.HiddenFor(model => model.VerifyLvl)
        @Html.HiddenFor(model => model.SurveyDate)
        @*@Html.HiddenFor(model => model.SurveyStation)*@
        @Html.HiddenFor(model => model.TechPara1)
        @Html.HiddenFor(model => model.TechPara2)
        @Html.HiddenFor(model => model.TechPara3)
        @Html.HiddenFor(model => model.TechPara4)
        @Html.HiddenFor(model => model.MEDFactory)
        @*@Html.HiddenFor(model => model.MEDFBNo)*@
        @*@Html.HiddenFor(model => model.MEDFBDue)*@
        @Html.HiddenFor(model => model.AnyDesignChange)
        @Html.HiddenFor(model => model.ChecklistUsed)
        @Html.HiddenFor(model => model.DesignFolder)
        @Html.HiddenFor(model => model.IsDocQualityGood)
        @Html.HiddenFor(model => model.IsDocSufficient)
        @Html.HiddenFor(model => model.SetHoldTime)
        @Html.HiddenFor(model => model.IORASpentTime)
        @*@Html.HiddenFor(model => model.ModificationDesc)*@
        @Html.HiddenFor(model => model.OnHoldNote)
        @Html.HiddenFor(model => model.FeeVerifyTime)
        @Html.HiddenFor(model => model.RegisterTime)
        @Html.HiddenFor(model => model.DocReq)
        @Html.HiddenFor(model => model.NoOfCert)
        @Html.HiddenFor(model => model.FeeSet)
        @Html.HiddenFor(model => model.VesselID)
        @Html.HiddenFor(model => model.DocReqNote)
        @Html.HiddenFor(model => model.NpsDbId)
        @*@Html.HiddenFor(model => model.ExeDoneBy)
            @Html.HiddenFor(model => model.ExeDoneTime)*@
        @Html.HiddenFor(model => model.CompletedBy)
        @Html.HiddenFor(model => model.SendingFlag)
        @Html.HiddenFor(model => model.IoraDbId)
        @Html.HiddenFor(model => model.InternalFee)
    </div>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> NPS Job ID: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.NpsJobId, new
            {
                htmlAttributes = new { @class = "form-control", @readonly = "readonly" }
            })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Customer Name: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CustomerName,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Sales Order No.: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.SalesOrderNo,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Product name: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.ProdDescription,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Deliverable: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CertType,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Issuance Type: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CertAction,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Equipment main-category: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MainProdType,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Equipment sub-category: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.SubProdType,
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Ref.Cert.No.: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MEDFBNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDFBNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Ref.deliverable no.: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.ExistingCertNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ExistingCertNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Ref.cert.expire date.: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MEDFBDue,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDFBDue,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> MWL: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MWL,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MWL,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Amount of Certificate: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CertAmount,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CertAmount,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> MED Item No: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.MEDItemNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDItemNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Serial No.: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.SerialNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SerialNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> New ceritificate No.: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.CertNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CertNo,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="col-lg-4 bName"> Survey station: </span>
        <span class="col-lg-8">
            @Html.EditorFor(model => model.SurveyStation,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SurveyStation,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class=" col-lg-12">
        <span class="bName col-lg-4">
            Survey date: (DD/MM/YYYY)
            <img onclick="viewCalendar('jcalendar_parent', 'SurveyDate')" style="margin-top: 5px;" width="20" height="20" src="~/Content/pictures/calendar-32x32.png" alt="CAL" border="0" class="no-print">
        </span>
        <span id="jcalendar_parent" class="jcalendar_parent" style="z-index: 999"></span>
        <span class="col-lg-8">
            <input class="form-control" name="SurveyDate_Input" value="@Model.SurveyDate" id="SurveyDate_Input" readonly />
        </span>
    </p>
    <p class="col-lg-12">
        <span class="bName col-lg-4">
            Scope of modification:
        </span>
        <span>
            @Html.EditorFor(model => model.ModificationDesc,
                new
                     {
                         htmlAttributes = new
                         {
                             @class = "form-control",
                    style = "height: 200px; width: 100%; resize none;"
                         }
                     })
            @Html.ValidationMessageFor(model => model.ModificationDesc,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <p class="col-lg-12">
        <span class="bName col-lg-4">
            Internal approval note:
        </span>
        <span>
            @Html.EditorFor(model => model.ApprNote,
                new
                     {
                         htmlAttributes = new
                         {
                             @class = "form-control",
                    style = "height:200px;width:100%"
                         }
                     })
            @Html.ValidationMessageFor(model => model.ApprNote,
                "", new { @class = "text-danger" })
        </span>
    </p>
    <iframe id="iframe1" frameborder="0" src="@Url.Content("~/Rule/IndexReadOnly")" style="width: 100%; height: 100px;" height: 100px;" scrolling="no" onload="resizeIframe(this)"></iframe>
    <iframe id="iframe2" frameborder="0" src="@Url.Content("~/TechChecklist/Index")" style="width: 100%; height: 100px;" scrolling="no" onload="resizeIframe(this)"></iframe>
    <div id="signatures">
        <p class="bName"> RAE: _____________  &nbsp Date:________________ &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Verifier : _____________  &nbsp Date:________________</p>
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.FeeSetter,
            new { htmlAttributes = new { @class = "form-control", id = "feeSetter" } });
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.FeeSetTime,
            new
                 {
                     htmlAttributes = new
                     {
                         @class = "form-control",
                         id = "feeSetTime",
                         @Value = Model.FeeSetTime?.ToString("dd-MM-yyyy HH:mm:ss")
                     }
                 });
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.TaskHandler,
            new { htmlAttributes = new { @class = "form-control", id = "taskHandler" } });
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.ExeDoneBy,
            new { htmlAttributes = new { @class = "form-control", id = "ExeDoneBy" } });
    </div>
    <div class="bing col-lg-6" hidden>
        @Html.EditorFor(model => model.ExeDoneTime,
            new { htmlAttributes = new { @class = "form-control", id = "ExeDoneTime" } });
    </div>
    <div class="no-print">
        @{
            Html.RenderPartial("_SaveCompleteReopen");
            Html.RenderPartial("_TaskSending");
        }
    </div>
}
@Html.ValidationSummary()

@section scripts{
    <script>
    // Read viewbag info
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));
    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    // Set task parameter
    var taskNo = 3;
    var taskStatusFlag = "ExeDoneBy"; //who completed the task
    var taskCompleteDate = "ExeDoneTime";
    var taskCompleteStr = "The job is executed by ";

    // Initial rendering
    renderTaskShowHide(taskNo, taskStatusFlag, taskCompleteDate, taskCompleteStr, userSignature);
    renderTaskHandling(LUser, bm);
    renderTaskInputFields(Job.LCertType, Job.LCertAction);

    console.log(Job)

    appendElementOptions("test", Job)

    $.each(LSubProdType, function (key, data) {
        if (data.UpperLvl == mval) {
            $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
        }
    });

    // Event handlers
    $("#selectMainProdType").on("change", function () {
        var mval = $("#selectMainProdType :selected").text();

        $('#selectSubProdType option').each(function () {
            if ($(this).val() != 'X') {
                $(this).remove();
            }
        });

        $("#selectSubProdType option").remove();
        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == mval) {
                $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
            }
        });
    });
    </script>
}

@section Styles{
}