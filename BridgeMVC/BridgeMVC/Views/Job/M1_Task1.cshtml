@model BridgeMVC.Models.Job

@{
    Layout = "~/Views/Shared/_LayoutM1TaskStandard.cshtml";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    string SF = (string)Session["SendingFlag"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;
    var FinancialSet = ViewBag.FinancialSet;
}
<h2>FEE SETTING</h2>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    <div class="bing col-lg-6">
        <p> NPS Job ID: </p>
        <p>
            @Html.EditorFor(model => model.NpsJobId, new { htmlAttributes = new { @class = "form-control", id = "NpsJobId" } })
            @Html.ValidationMessageFor(model => model.NpsJobId, "", new { @class = "text-danger" })
        </p>
    </div>
    <div class="bing col-lg-6">
        <p>Customer:</p>
        <p>
            @Html.EditorFor(model => model.CustomerName,new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
        </p>
    </div>
    <div class="bing col-lg-6">
        <p>Sales Order:</p>
        <p>
            @Html.EditorFor(model => model.SalesOrderNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SalesOrderNo, "", new { @class = "text-danger" })
        </p>
    </div>
    <div class="bing col-lg-6">
        <p>Product Name:</p>
        <p>
            @Html.EditorFor(model => model.ProdDescription,  new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ProdDescription, "", new { @class = "text-danger" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p>Deliverable:</p>
        <p>
            @Html.DropDownListFor(model => model.CertType,new List<SelectListItem> { new SelectListItem { Text = Model.CertType, Value = Model.CertType } },
     new { @class = "form-control", id = "selectCertType" })
        </p>
 
    </div>
    <div class="bing col-lg-6">
        <p>Issurance type:</p>
        <p>
            @Html.DropDownListFor(model => model.CertAction, new List<SelectListItem> { new SelectListItem { Text = Model.CertAction, Value = Model.CertAction } },
    new { @class = "form-control", id = "selectCertAction" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p>Ref. certificate expiring date.:</p>
        <p>
            @Html.EditorFor(model => model.MEDFBDue,new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDFBDue,
                "", new { @class = "text-danger" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p>Ref. deliverable no.:</p>
        <p>
            @Html.EditorFor(model => model.ExistingCertNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ExistingCertNo,
                "", new { @class = "text-danger" })
        </p>
    </div>
    <div class="bing col-lg-6">
        <p>Main Equipment category:</p>
        <p>
            @Html.DropDownListFor(model => model.MainProdType,
    new List<SelectListItem> { new SelectListItem { Text = Model.MainProdType, Value = Model.MainProdType } },
    new { @class = "form-control", id = "selectMainProdType" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p>Sub Equipment category:</p>
        <p>
            @Html.DropDownListFor(model => model.SubProdType,
    new List<SelectListItem> { new SelectListItem { Text = Model.SubProdType, Value = Model.SubProdType } },
    new { @class = "form-control", id = "selectSubProdType" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p>Maximum working load:</p>
        <p>
            @Html.EditorFor(model => model.MWL,
    new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MWL,
                "", new { @class = "text-danger" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p>Amount of certificate:</p>
        <p>
            @Html.EditorFor(model => model.CertAmount,
    new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CertAmount,
                "", new { @class = "text-danger" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p id="pMEDFBNo">Ref. Certificate No.:</p>
        <p>
            @Html.EditorFor(model => model.MEDFBNo,
new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDFBNo,
                "", new { @class = "text-danger" })

        </p>

    </div>
    <div class="bing col-lg-6">
        <p> MED Item No.: </p>
        <p>
            @Html.EditorFor(model => model.MEDItemNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDItemNo,
                "", new { @class = "text-danger" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p> Serial no.: </p>
        <p>
            @Html.EditorFor(model => model.SerialNo,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SerialNo,
                "", new { @class = "text-danger" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p> Survey station </p>
        <p>
            @Html.EditorFor(model => model.SurveyStation,
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SurveyStation,
                "", new { @class = "text-danger" })
        </p>

    </div>
    <div class="bing col-lg-6">
        <p>
            Survey date: (DD/MM/YYYY)
            <img onclick="viewCalendar('jcalendar_parent', 'SurveyDate')" style="margin-top: 5px;" width="20" height="20" src="~/Content/pictures/calendar-32x32.png" alt="CAL" border="0">
        </p>
        <div id="jcalendar_parent" class="jcalendar_parent" style="z-index: 999"></div>

        <input class="form-control" name="SurveyDate_Input" value="@Model.SurveyDate" id="SurveyDate_Input" readonly />
    </div>
    <div style="clear:both" ; class=" col-lg-12 ">
        <h4 style="clear:both;">Scope of modification:</h4>
        <p>
            @Html.EditorFor(model => model.ModificationDesc,
                new { htmlAttributes = new { @class = "form-control", style = "height:60px" } })
            @Html.ValidationMessageFor(model => model.ModificationDesc,
                "", new { @class = "text-danger" })
        </p>

    </div>
    <iframe id="iframe" frameborder="0" src="@Url.Content("~/Rule/Index")" style="width: 100%; height: 200px;"></iframe>
    <iframe id="iframe" frameborder="0" src="@Url.Content("~/DocReq/Index")" style="width: 100%; height: 200px;"></iframe>

    <div class="bing col-lg-6">
        Fee (External, incl. TSA/MSA):
        @Html.EditorFor(model => model.Fee,
            new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Fee,
            "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        Budget hour: <input type="button" id="budgetHourButton" img style="cursor:pointer" src="~/Content/pictures/magic.png" class="magicWand" />

        @Html.EditorFor(model => model.BudgetHour,
            new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.BudgetHour,
            "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        To be delivered in ? week(s):
        @Html.EditorFor(model => model.DeliveryWeek,
            new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.DeliveryWeek,
            "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6" hidden>
        Fee setter
        @Html.EditorFor(model => model.FeeSetter,
            new { htmlAttributes = new { @class = "form-control" } })
        @Html.HiddenFor(model => model.FeeSetTime,
            new { htmlAttributes = new { @class = "form-control", @Value = Model.FeeSetTime?.ToString("dd-MM-yyyy HH:mm:ss") } })
        @Html.EditorFor(model => model.TaskHandler,
            new { htmlAttributes = new { @class = "form-control" } })
    </div>
    <br />
    <h4 style="clear:both;">Internal approval note:</h4>
    <div class=" col-lg-12 ">
        @Html.EditorFor(model => model.ApprNote,
            new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
        @Html.ValidationMessageFor(model => model.ApprNote,
            "", new { @class = "text-danger" })
    </div>

    @{
        Html.RenderPartial("_PartialM1JobHiddenAttributes");
        Html.RenderPartial("_SaveCompleteReopen");
        Html.RenderPartial("_TaskSending");
    }
</div>
    @Html.ValidationSummary();
}
<hr />

@section Scripts{
    <script>
    //read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));

    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    // Set task parameter
    var taskNo = 1;
    var taskStatusFlag = "FeeSetter"; //who completed the task
    var taskCompleteDate = "FeeSetTime";
    var taskCompleteStr = "The fee is set by ";

    // Initial rendering
    renderTaskShowHide(taskNo, taskStatusFlag, taskCompleteDate, taskCompleteStr, userSignature);
    renderTaskHandling(LUser, bm);
    renderTaskInputFields($("#selectCertType").val(), $("#selectCertAction").val());

    $.each(LCertType, function (key, data) {
        $("#selectCertType").append(new Option(data.CertType, data.CertType));
    });

    $.each(LCertAction, function (key, data) {
        $("#selectCertAction").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LMainProdType, function (key, data) {
        $("#selectMainProdType").append(new Option(data.ListItem, data.ListItem));
    });

    var mval = $("#selectMainProdType :selected").text();

    $.each(LSubProdType, function (key, data) {
        if (data.UpperLvl == mval) {
            $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
        }
    });

    // Setting up jQuery change listener for selectCertType
    $("#selectCertType").on("change", function () {
        renderTaskInputFields($("#selectCertType").val(), $("#selectCertAction").val());
    });

    // Setting up jQuery change listener for selectCertAction
    $("#selectCertAction").on("change", function () {
        renderTaskInputFields($("#selectCertType").val(), $("#selectCertAction").val());
    });

    // Setting up jQuery change listener for selectMainProdType
    $("#selectMainProdType").on("change", function () {
        var mval = $("#selectMainProdType :selected").text();

        $('#selectSubProdType option').each(function () {
            if ($(this).val() != 'X') {
                $(this).remove();
            }
        });

        $("#selectSubProdType option").remove();
        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == mval) {
                $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
            }
        });
    });

    // Setting up jQuery click listener for budget hour button.
    // Not working 100 % correctly yet ?
    $("budgetHourButton").on("click", function () {
        budgetHourCallback(bm, taskNo, LCertType);
    })
    </script>
}

@section Styles{
}