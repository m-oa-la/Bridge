@model BridgeMVC.Models.Job

@{
    ViewBag.Title = "M1_Task1";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    string SF = (string)Session["SendingFlag"];

    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;
    var FinancialSet = ViewBag.FinancialSet;
    var Lmeditemnos = ViewBag.Lmeditemnos;

}
<script language="JavaScript" type="text/javascript" src="~/Scripts/jquery-3.3.1.min.js"></script>
<script language="JavaScript" type="text/javascript" src="~/Scripts/bridgeScript.js"></script>
<script language="JavaScript" type="text/javascript" src="~/Scripts/jquery-ui.min.js"></script>


<style>

    .bing {
        float: left;
        /*width: 450px;*/
        padding: 0.5em 1em 0.5em 1em;
        min-width: 400px;
        font-weight: bold;
    }

    .form-control {
        font-weight: normal;
    }
</style>
<h2>FEE SETTING</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()

<div>
    @Html.HiddenFor(model => model.Tag)
    @Html.HiddenFor(model => model.BridgeModule)
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.NpsJobName)
    @*@Html.HiddenFor(model => model.NpsJobId)*@
    @*@Html.HiddenFor(model => model.TaskHandler)*@
    @Html.HiddenFor(model => model.Task1)
    @Html.HiddenFor(model => model.Task2)
    @Html.HiddenFor(model => model.Task3)
    @*@Html.HiddenFor(model => model.CustomerName)*@
    @*@Html.HiddenFor(model => model.ProdDescription)*@
    @*@Html.HiddenFor(model => model.ApprNote)*@
    @Html.HiddenFor(model => model.IsComplete)
    @*@Html.HiddenFor(model => model.SalesOrderNo)*@
    @Html.HiddenFor(model => model.SubOrderNo)
    @*@Html.HiddenFor(model => model.CertType)*@
    @*@Html.HiddenFor(model => model.CertAction)*@
    @*@Html.HiddenFor(model => model.MainProdType)*@
    @*@Html.HiddenFor(model => model.SubProdType)*@
    @Html.HiddenFor(model => model.ReceivedTime)
    @*@Html.HiddenFor(model => model.FeeSetTime)*@
    @Html.HiddenFor(model => model.IoraSentTime)
    @Html.HiddenFor(model => model.IoraReturnedTime)
    @Html.HiddenFor(model => model.JobCompletedTime)
    @*@Html.HiddenFor(model => model.CustomerName)
        @Html.HiddenFor(model => model.CustomerId)*@
    @*@Html.HiddenFor(model => model.Fee)*@
    @*@Html.HiddenFor(model => model.FeeSetter)
        @Html.HiddenFor(model => model.FeeVerifier)*@
    @Html.HiddenFor(model => model.JobVerifier)
    @Html.HiddenFor(model => model.RAE)
    @*@Html.HiddenFor(model => model.MWL)*@
    @*@Html.HiddenFor(model => model.ExistingCertNo)*@
    @Html.HiddenFor(model => model.CertNo)
    @*@Html.HiddenFor(model => model.SerialNo)*@
    @*@Html.HiddenFor(model => model.MEDItemNo)*@
    @*@Html.HiddenFor(model => model.DeliveryWeek)*@
    @Html.HiddenFor(model => model.LocalUnit)
    @Html.HiddenFor(model => model.ArchiveFolder)
    @Html.HiddenFor(model => model.IsHold)
    @Html.HiddenFor(model => model.StatusNote)
    @Html.HiddenFor(model => model.VerifyLvl)
    @Html.HiddenFor(model => model.SurveyDate)
        @*@Html.HiddenFor(model => model.SurveyStation)*@
        @Html.HiddenFor(model => model.TechPara1)
        @Html.HiddenFor(model => model.TechPara2)
        @Html.HiddenFor(model => model.TechPara3)
        @Html.HiddenFor(model => model.TechPara4)
        @Html.HiddenFor(model => model.MEDFactory)
        @*@Html.HiddenFor(model => model.MEDFBNo)*@
        @*@Html.HiddenFor(model => model.MEDFBDue)*@
        @Html.HiddenFor(model => model.AnyDesignChange)
        @Html.HiddenFor(model => model.ChecklistUsed)
        @Html.HiddenFor(model => model.DesignFolder)
        @Html.HiddenFor(model => model.IsDocQualityGood)
        @Html.HiddenFor(model => model.IsDocSufficient)
        @Html.HiddenFor(model => model.SetHoldTime)
        @Html.HiddenFor(model => model.IORASpentTime)
        @*@Html.HiddenFor(model => model.ModificationDesc)*@
        @Html.HiddenFor(model => model.OnHoldNote)
        @Html.HiddenFor(model => model.FeeVerifyTime)
        @Html.HiddenFor(model => model.RegisterTime)
        @Html.HiddenFor(model => model.DocReq)
        @Html.HiddenFor(model => model.NoOfCert)
        @Html.HiddenFor(model => model.FeeSet)
        @Html.HiddenFor(model => model.VesselID)
        @Html.HiddenFor(model => model.DocReqNote)
        @Html.HiddenFor(model => model.NpsDbId)
        @Html.HiddenFor(model => model.ExeDoneBy)
        @Html.HiddenFor(model => model.ExeDoneTime)
        @Html.HiddenFor(model => model.CompletedBy)
        @Html.HiddenFor(model => model.SendingFlag)
        @Html.HiddenFor(model => model.IoraDbId)
        @Html.HiddenFor(model => model.InternalFee)
    </div>

<div class="form-horizontal">
    <hr />
    <div class="bing col-lg-6">
        <p> NPS Job ID: </p>
        @Html.EditorFor(model => model.NpsJobId, new { htmlAttributes = new { @class = "form-control", id = "NpsJobId" } })
        @Html.ValidationMessageFor(model => model.NpsJobId, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Customer:</p>
        @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Sales Order:</p>
        @Html.EditorFor(model => model.SalesOrderNo, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SalesOrderNo, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p>Product Name:</p>
        @Html.EditorFor(model => model.ProdDescription, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.ProdDescription, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Deliverable:</p>
        @Html.DropDownListFor(model => model.CertType, new List<SelectListItem> { new SelectListItem { Text = Model.CertType, Value = Model.CertType } }, new { @class = "form-control", id = "selectCertType" })
    </div>
    <div class="bing col-lg-6">
        <p>Issurance type:</p>
        @Html.DropDownListFor(model => model.CertAction, new List<SelectListItem> { new SelectListItem { Text = Model.CertAction, Value = Model.CertAction } }, new { @class = "form-control", id = "selectCertAction" })
    </div>
    <div class="bing col-lg-6">
        <p>Ref. certificate expiring date.:</p>
        @Html.EditorFor(model => model.MEDFBDue, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MEDFBDue, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Ref. deliverable no.:</p>
        @Html.EditorFor(model => model.ExistingCertNo, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.ExistingCertNo, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Main Equipment category:</p>
        @Html.DropDownListFor(model => model.MainProdType, new List<SelectListItem> { new SelectListItem { Text = Model.MainProdType, Value = Model.MainProdType } }, new { @class = "form-control", id = "selectMainProdType" })
    </div>
    <div class="bing col-lg-6">
        <p>Sub Equipment category:</p>
        @Html.DropDownListFor(model => model.SubProdType, new List<SelectListItem> { new SelectListItem { Text = Model.SubProdType, Value = Model.SubProdType } }, new { @class = "form-control", id = "selectSubProdType" })
    </div>
    <div class="bing col-lg-6">
        <p>Maximum working load:</p>
        @Html.EditorFor(model => model.MWL, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MWL, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Amount of certificate:</p>
        @Html.EditorFor(model => model.CertAmount, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.CertAmount, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p id="pMEDFBNo">Ref. Certificate No.:</p>
        @Html.EditorFor(model => model.MEDFBNo, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MEDFBNo, "", new { @class = "text-danger" })
    </div>
    @*<div class="bing col-lg-6">
        <p> MED Item No.: </p>
        @Html.EditorFor(model => model.MEDItemNo, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MEDItemNo, "", new { @class = "text-danger" })
    </div>*@

    <div class="bing col-lg-6">
        <p>MED Item No.:</p>
        @Html.DropDownListFor(model => model.MEDItemNo, new List<SelectListItem> { new SelectListItem { Text = Model.MEDItemNo, Value = Model.MEDItemNo } }, new { @class = "form-control", id = "selectMEDItemNo" })
    </div>

    <div class="bing col-lg-6">
        <p> Serial no.: </p>
        @Html.EditorFor(model => model.SerialNo, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SerialNo, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p> Survey station </p>
        @Html.EditorFor(model => model.SurveyStation, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SurveyStation, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>
            Survey date: (DD/MM/YYYY)
            <img onclick="viewCalendar('jcalendar_parent', 'SurveyDate')" style="margin-top: 5px;" width="20" height="20" src="~/Content/pictures/calendar-32x32.png" alt="CAL" border="0">
        </p>
        <div id="jcalendar_parent" class="jcalendar_parent" style="z-index: 999"></div>

        <input class="form-control" name="SurveyDate_Input" value="@Model.SurveyDate" id="SurveyDate_Input" readonly />


    </div>

    <div style="clear:both" ; class=" col-lg-12 ">
        <h4 style="clear:both;">Scope of modification:</h4>
        @Html.EditorFor(model => model.ModificationDesc, new { htmlAttributes = new { @class = "form-control", style = "height:60px" } })
        @Html.ValidationMessageFor(model => model.ModificationDesc, "", new { @class = "text-danger" })
    </div>

    <iframe id="iframe" frameborder="0" src="@Url.Content("~/Rule/Index")" style="width: 100%; height: 200px;"></iframe>
    <iframe id="iframe" frameborder="0" src="@Url.Content("~/DocReq/Index")" style="width: 100%; height: 200px;"></iframe>

    <div class="bing col-lg-6">
        Fee (External, incl. TSA/MSA):
        @Html.EditorFor(model => model.Fee, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Fee, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        Budget hour: <img style="cursor:pointer" src="~/Content/pictures/magic.png" onclick="budgetHourCalc()" class="magicWand">

        @Html.EditorFor(model => model.BudgetHour, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.BudgetHour, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        To be delivered in ? week(s):
        @Html.EditorFor(model => model.DeliveryWeek, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.DeliveryWeek, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6" hidden>
        Fee setter
        @Html.EditorFor(model => model.FeeSetter, new { htmlAttributes = new { @class = "form-control" } })
        @Html.HiddenFor(model => model.FeeSetTime, new { htmlAttributes = new { @class = "form-control", @Value = Model.FeeSetTime?.ToString("dd-MM-yyyy HH:mm:ss") } })
        @Html.EditorFor(model => model.TaskHandler, new { htmlAttributes = new { @class = "form-control" } })
    </div>
    <br />
    <h4 style="clear:both;">Internal approval note:</h4>
    <div class=" col-lg-12 ">

        @Html.EditorFor(model => model.ApprNote, new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
        @Html.ValidationMessageFor(model => model.ApprNote, "", new { @class = "text-danger" })
    </div>
    @{
        Html.RenderPartial("_SaveCompleteReopen");
        Html.RenderPartial("_TaskSending");
    }

</div>

    @Html.ValidationSummary();
}
<hr />
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>

    //read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));

    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));
    var Lmeditemnos = @Html.Raw(Json.Encode(Lmeditemnos));
    var TargetUser;
    var BEmail;
    var taskStatus;

    //Set task parameter
    var taskNo = 1;
    var taskStatusFlag = "FeeSetter"; //who completed the task
    var taskCompleteDate = "FeeSetTime";
    var taskCompleteStr = "The fee is set by ";

    renderTaskShowHide();
    renderTaskHandling();

    //show hide fields
    showHideFields();
    function showHideFields()
    {

        var defaultHiddenList = ( "MEDFBNo,MEDFBDue,SerialNo,CertAmount,MWL,selectMEDItemNo," +
        "ExistingCertNo,SurveyStation,SurveyDate,ModificationDesc").split(',');
        defaultHiddenList.forEach(hideElement);

        var toShow = "";

        switch ($("#selectCertType").val())
        {
            case "MED-F":
                toShow += "MEDFBNo,MEDFBDue,SerialNo,CertAmount,selectMEDItemNo,SurveyStation,SurveyDate,";
                $("#pMEDFBNo").html("Ref. MED-B certificate No.");
                $("#selectCertAction").val("Initial");
                $("#selectMainProdType").val("Life-Saving appliances");
                $("#selectSubProdType").append(new Option("Module F certification", "Module F certification"));
                $("#selectSubProdType").val("Module F certification");
                //$("#SubProdType").val("Module F certification");
                break;
            case "MED-G":
                toShow += "SerialNo,MWL,selectMEDItemNo,";
                break;
            case "MED-B":
                toShow += "MWL,selectMEDItemNo,";
                break;
            case "TA":
                toShow += "MWL,";
                break;
            case "DVR":
                toShow += "SerialNo,MWL,";
                break;
            case "MED-D":
                toShow += "MWL,";
                break;
            default:
                toShow += "";
        }
        switch ($("#selectCertAction").val()) {
            case "Modification":
                toShow += "ExistingCertNo,ModificationDesc";
                break;
            case "Initial with reference":
                toShow += "ExistingCertNo,";
                break;
            case "Renewal with modification":
                toShow += "ExistingCertNo,ModificationDesc";
                break;
            case "Renewal":
                toShow += "ExistingCertNo,";
                break;
            default:
                toShow += "";
        }


        if (toShow) {
            var splitS = toShow.split(',');
            splitS.forEach(showElement);

        }
     }

    function showElement(value) {
        if (value) {
            document.getElementById(value).parentNode.style.display = "block";
        }
    }
    function hideElement(value) {
        if (value) {
            console.log(value);
            document.getElementById(value).parentNode.style.display = "none";
        }
    }

    //$("#selectCertType").change();

    $("#selectCertType").on("change", function () {
        showHideFields()
    });
    $("#selectCertAction").on("change", function () {
        showHideFields()
    });








    //console.log(getTodayDate());

    //set up select list
    $.each(LCertType, function (key, data) {

        $("#selectCertType").append(new Option(data.CertType, data.CertType));
    });

    $.each(LCertAction, function (key, data) {
        $("#selectCertAction").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LMainProdType, function (key, data) {
        $("#selectMainProdType").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(Lmeditemnos, function (key, data) {
        $("#selectMEDItemNo").append(new Option(data.ListItem, data.ListItem));
    });




    var mval = $("#selectMainProdType :selected").text();
      $.each(LSubProdType, function (key, data) {
        if (data.UpperLvl == mval) {
            $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
        }
    });

//When main prodtype changes, refesh the sub prod type.
    $("#selectMainProdType").on("change", function () {
        var mval = $("#selectMainProdType :selected").text();

        $('#selectSubProdType option').each(function () {
            if ($(this).val() != 'X') {
                $(this).remove();
            }
        });

        $("#selectSubProdType option").remove();

        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == mval) {
                $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
            }
        });
    });

    function budgetHourCalc() {

        if (!$("#selectCertType").val()) {
            alert('The Certitication Type has to be selected first.');
        } else {
            ct1 = $("#selectCertType").val();

            return $.ajax({
                type: 'GET',
                url: '/Job/M1_Task1_BudgetHourCalc',
                data: { bm_f: bm, ct_f: ct1 },
                cache: false,
                success: calcBudgetHour
            });
        }

    }

    function calcBudgetHour(data) {

        var f = jQuery.parseJSON(data);
        var dis = (1 - f.allocationFee) * (1 - f.tsa - f.msa);
        var feee = document.getElementById("Fee").value;;
        var internalFee = Math.round(feee * dis);
        var bh = Math.round(internalFee * 0.74 / 1200);
        $("#BudgetHour").val(bh);
        alert("External fee: " + feee +
            ";\nAllocation Fee: " + f.allocationFee +
            ";\nTSA: " + f.tsa +
            ";\nMSA: " + f.msa +
            ";\nInternal Fee: " + internalFee +
            ";\nBudgetHour = InternalFee * 0,74 / 1200 = " + bh);
    }



    //$(function () {

    //    var availableTags = ["MED/1.21", "MED/1.23", "MED/1.26a", "MED/1.26b", "MED/1.26c",
    //        "MED/1.41a", "MED/1.41b", "MED/1.41c", "MED/1.41d", "MED/1.41e"];


    //    $("#MEDItemNo").autocomplete({
    //        source: availableTags
    //    });
    //});

</script>

