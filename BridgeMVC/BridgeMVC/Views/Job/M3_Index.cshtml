@model IEnumerable<BridgeMVC.Models.Job>

@{
    ViewBag.Title = "Index";
    string BridgeLastUsed = (string)Session["BridgeModule"];
    string UserSignature = (string)Session["UserSignature"];
    var LUser = ViewBag.LUser;
    var US = ViewBag.userSig;
    BridgeMVC.Models.BBridge bridge = (BridgeMVC.Models.BBridge)ViewBag.bridge;
    string styleTxt = "border-radius: 0; border: none";
    string bridgeLongName = bridge.BridgeLongName;
    List<string> taskNames = bridge.TaskName.Split(';').ToList<string>();
}

<style>

    .classTY {
        background-color: seagreen;
        color: transparent;
        cursor: pointer;
        width: 40px;
        border-style: none;
    }

    .classTN {
        background-color: gainsboro;
        color: transparent;
        cursor: pointer;
        width: 40px;
        border-style: none;
    }

    .classTTASK {
        background-color: DodgerBlue;
        color: transparent;
        cursor: pointer;
        width: 40px;
        border-style: none;
    }

    .classTTASKIORA {
        background-color: DodgerBlue;
        color: transparent;
        cursor: pointer;
        width: 40px;
        border-style: none;
    }

    .classTPENDING {
        background-color: gold;
        color: black;
        cursor: pointer;
        width: 40px;
        border-style: none;
        font-size: large;
        font-weight: bold;
    }

    .classT {
        background-color: gainsboro;
        color: transparent;
        cursor: pointer;
        width: 40px;
        border-style: none;
    }


    .hoverRow p {
        display: block;
        overflow: hidden;
        text-overflow: clip;
        white-space: nowrap;
        max-width: 480px;
    }

    .hoverRow td:hover p {
        white-space: normal;
        word-wrap: normal;
        word-break: break-all;
    }

    .table th, td {
        border-radius: 25px;
        border: 1px solid white;
    }

    .title {
        font-size: x-large;
        font-weight: bold;
    }
</style>
<div class="title">
    MY BRIDGE JOBLIST - @bridgeLongName
</div>
<hr />
@using (Html.BeginForm())
{
    <table>
        <colgroup>
            <col span="1" style="width: 12%;">
            <col span="1" style="width: 76%;">
            <col span="1" style="width: 12%;">
        </colgroup>
        <tr>
            <td>
                @Html.TextBox("SearchString", null, new { @class = "form-control" })

            </td>
            <td>
                <input type="submit" value="Search" />
            </td>
            <td style="float:right">
                <select id="userSig" name="userSig" class="form-control"></select>
            </td>
            <td>
                <input type="submit" value="Change User" />
            </td>
        </tr>
    </table>

}
<br />
<table class="table table-mid-align-rows hoverRow" style="table-layout:fixed;">
    <colgroup>
        <col span="1" style="width: 20%;">
        <col span="1" style="width: 20%;">
        <col span="1" style="width: 20%;">
        <col span="1" style="max-width: 50px; width:49px">
        <col span="1" style="max-width: 50px; width:49px">
        <col span="1" style="max-width: 50px; width:49px">
        <col span="1" style="max-width: 50px; width:49px">
        <col span="1" style="width: 30%;">
    </colgroup>
    <tr>
        <th style="border-top:none">           JOB ID       </th>
        <th style="border-top:none">            CUSTOMER        </th>
        <th style="border-top:none">            PROJECT NAME    </th>

        @foreach (string taskname in taskNames)
        {
            <th style="border-top:none">           @taskname     </th>
        }


        <th style="border-top:none">          IORA STATUS    </th>
        @*<th>            @Html.DisplayNameFor(model => model.TaskHandler)        </th>
        <th>            @Html.DisplayNameFor(model => model.Completed)        </th>*@
    </tr>

    @foreach (var item in Model)
    {
        string npsJobName = item.NpsJobName;
        if (string.IsNullOrEmpty(npsJobName))
        {
            npsJobName = item.ProdDescription;
        }


        string classT1 = "classT" + item.Task1;
        string classT2 = "classT" + item.Task2;

        if (classT2 == "classTTASK")
        {
            classT2 = "classTTASKIORA";
        }


        string classT3 = "classT" + item.Task3;
        string classT4 = "classT" + item.Task4;

        string editlink1 = "'/Job/CommonTask1/" + item.Id + "'";
        string editlink2 = "'/Job/IsIORAExisting/" + item.Id + "'";

        string editlink3 = "'/Job/CommonTask3/" + item.Id + "'";
        string editlink4 = "'/Job/CommonTask4/" + item.Id + "'";

        string t2tag = "T2TAG" + item.Task2 + "T2TAG";
        <tr>
            <td>
                <p>
                    @Html.DisplayFor(modelItem => item.NpsJobId)
                </p>
            </td>
            <td>
                <p>  @Html.DisplayFor(modelItem => item.CustomerName)</p>
            </td>
            <td>
                <p>
                    @npsJobName
                </p>
            </td>
            <td class="@classT1" onclick="location.href=@editlink1">
                @Html.DisplayFor(modelItem => item.Task1)
            </td>
            <td class="@classT2" onclick="location.href=@editlink2" align="center" tag="@t2tag">
                @Html.DisplayFor(modelItem => item.Task2)
            </td>
            <td class="@classT3" onclick="location.href=@editlink3">
                @Html.DisplayFor(modelItem => item.Task3)
            </td>
            <td class="@classT4" onclick="location.href=@editlink4">
                @Html.DisplayFor(modelItem => item.Task4)
            </td>
            <td>
                <p>
                    @if (!string.IsNullOrEmpty(item.IoraDbId))
                    {
                        @Html.DisplayFor(modelItem => item.IoraDbId)
                    }
                </p>
            </td>
        </tr>
    }
</table>
<br /><br /><br />
<hr />

<script>
    var LUser = @Html.Raw(Json.Encode(LUser));
    var us = @Html.Raw(Json.Encode(US));


    $("#userSig").append(new Option(us, us));

    $.each(LUser, function (key, data) {
        $("#userSig").append(new Option(data.Signature, data.Signature));
    });

</script>