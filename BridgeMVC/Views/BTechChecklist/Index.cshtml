@model IEnumerable<BridgeMVC.Models.BTechChecklist>
@{

    var sn = 0;
    var Job = ViewBag.Job;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;

}
<style>
    table, tr {
        border-style: hidden;
    }

    .control-label{
        font-weight:bold;
    }

</style>
<p>
    @Html.ActionLink("Create New", "Create")
</p>
@using (Html.BeginForm())
{
    <p>
        <button type="submit" name="searchString" value="Winch for life saving">Winch</button>
        <button type="submit" name="searchString" value="Launching appliance for life saving">Davit</button>
        <button type="submit" name="searchString" value="Release mechanism for life saving">Release mechanism</button>
        <button type="submit" name="searchString" value="enewal">Renewal/Modification</button>
        <button type="submit" name="searchString" value="all" class="btn-default">All</button>

    </p>
}

<tr></tr>
@foreach (var item in Model)
{
    sn += 1;
<div style="border:groove;border-color:aliceblue;padding:12px">
    <table>
        <colgroup>
            <col span="1" style="width: 5%;">
            <col span="1" style="width: 20%;">
            <col span="1" style="width: 5%;">
            <col span="1" style="width: 30%;">
            <col span="1" style="width: 10%;">
            <col span="1" style="width: 20%;">
            <col span="1" style="width: 10%;">

        </colgroup>
        <tr>
            <td class="control-label ">Subject</td>
            <td class="form-group col-lg-3" id="Subject_@item.Id">

                @Html.EditorFor(modelItem => item.Subject, new { htmlAttributes = new { @class = "form-control" } })
            </td>
            <td class="control-label "> SubProdType</td>
            <td class="form-group" id="SubProdType_@item.Id">

                @Html.DropDownListFor(modelItem => item.SubProdType, new List<SelectListItem> { new SelectListItem { Text = item.SubProdType, Value = item.SubProdType } }, new { @class = "form-control", id = "selectSubProdType" + sn })

                @*@Html.EditorFor(modelItem => item.SubProdType, new { htmlAttributes = new { @class = "form-control" } })*@
            </td>
            <td class="control-label ">Ref. Rule</td>
            <td class="form-group" id="RuleRef_@item.Id">

                @Html.EditorFor(modelItem => item.RuleRef, new { htmlAttributes = new { @class = "form-control" } })
            </td>
            <td>
                <button class="btn-default" onclick="saveTCItem('@item.Id')"> Save </button>
            </td>

        </tr>

    </table>


    <span class="control-label col-md-2"> Guidance Note</span>
    <div class="form-group col-lg-10" id="GN_@item.Id">
        @Html.EditorFor(modelItem => item.GudianceNote, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(modelItem => item.GudianceNote, "", new { @class = "text-danger" })
    </div>


    <span class="control-label col-md-2"> Condition</span>

    <div class="form-group col-lg-8" id="Condition_@item.Id">
        @Html.EditorFor(modelItem => item.Condition, new { htmlAttributes = new { @class = "form-control" } })
        @*@Html.DropDownListFor(modelItem => item.Condition, new List<SelectListItem> { new SelectListItem { Text = item.Condition, Value = item.Condition } }, new { @class = "form-control", id = "selectCondition" + sn })*@

    </div>
    <button onclick="testCondition('@item.Id')"> Test Condition </button>
</div>

    }

<br />

    <div>
        One instance of <span class="h3">Job</span>.
        <pre id="jsonJob"></pre>
    </div>

<script>

    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var Job = @Html.Raw(Json.Encode(Job));
    var sn = @sn;
    console.log(sn);


    function saveTCItem(itemId) {
        console.log(itemId);
        var Subject = $("#Subject_" + itemId).children().eq(0).val();
        var SubProdType = $("#SubProdType_" + itemId).children().eq(0).val();
        var GudianceNote = $("#GN_" + itemId).children().eq(0).val();
        var RuleRef = $("#RuleRef_" + itemId).children().eq(0).val();
        var Condition = $("#Condition_" + itemId).children().eq(0).val();

        console.log(Subject);
        console.log(SubProdType);
        console.log(GudianceNote);
        console.log(RuleRef);
        console.log(Condition);

        callSaveBTCApi(itemId, Subject, SubProdType, GudianceNote, RuleRef, Condition)

    }

    function callSaveBTCApi(itemId, Subject, SubProdType, GudianceNote, RuleRef, Condition) {
        $.ajax(
            {
                type: 'GET',
                url: '/BTechChecklist/SaveBTCItem',
                data: { itemId: itemId, Subject: Subject, SubProdType: SubProdType, GudianceNote: GudianceNote, RuleRef: RuleRef, Condition: Condition },

                success: function (data) {

                    console.log(data);
                },
                error: function (e) {
                    alert('Error: ' + e);

                }
            });
    }

    function testCondition(itemId) {
        var cond = $("#Condition_" + itemId).children().eq(0).val();
        alert(eval(cond));
    }

    var subProdDropdowns = $('*[id^="selectSubProdType"]');

    for (index = 0; index < subProdDropdowns.length; ++index) {

        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == "LifeLife-Saving appliances") {
                subProdDropdowns[index].appendChild(new Option(data.ListItem, data.ListItem));
            }
        });

        subProdDropdowns[index].appendChild(new Option("All", "All"));

    };


    document.getElementById("jsonJob").innerHTML = JSON.stringify(Job, undefined, 2);




</script>