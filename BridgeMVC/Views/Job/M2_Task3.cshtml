@model BridgeMVC.Models.Job

@{
    ViewBag.Title = "M1_Task1";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    string SF = (string)Session["SendingFlag"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;
}

<style>
    .bing {
        float: left;
        /*width: 450px;*/
        padding: 0.5em 1em 0.5em 1em;
        min-width: 400px;
        font-weight: bold;
    }

    .form-control {
        font-weight: bold;
        color: steelblue;
    }
</style>

<h2>EXECUTE APPROVAL</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{@Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />

    <div class="bing col-lg-12">

        <h3>Scope of work: </h3>
        @Html.TextAreaFor(model => model.IoraSoW, new { @style = "height:300px; width:100%;", id = "DpSoW01", @class = "form-control", @readonly = "readonly" })
        @Html.ValidationMessageFor(model => model.IoraSoW, "", new { @class = "text-danger" })

    </div>



    <div class="bing col-lg-6">
        <p>Sales Order:</p>
        @Html.EditorFor(model => model.SalesOrderNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.SalesOrderNo, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6" hidden>
        <p>Fee (External, incl. TSA/MSA):</p>
        @Html.EditorFor(model => model.Fee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.Fee, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p>Budget Hours:</p>
        @Html.EditorFor(model => model.BudgetHour, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.BudgetHour, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p>Appoval Sub Order:</p>
        @Html.EditorFor(model => model.SubOrderNo, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SubOrderNo, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6" hidden>
        <p>RAE:<img style="cursor:pointer" src="~/Content/pictures/magic.png" onclick="SetWBasRAE()" class="magicWand"></p>
        @Html.EditorFor(model => model.RAE, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.RAE, "", new { @class = "text-danger" })
    </div>


    <div class="bing col-lg-6">
        <p>Ref. certificate due date.:</p>
        @Html.EditorFor(model => model.MEDFBDue, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.MEDFBDue, "", new { @class = "text-danger" })
    </div>




    <div class="bing col-lg-6">
        <p>Maximum working load:</p>
        @Html.EditorFor(model => model.MWL, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.MWL, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Amount of certificate:</p>
        @Html.EditorFor(model => model.CertAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.CertAmount, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p id="pMEDFBNo">Ref. Certificate No.:</p>
        @Html.EditorFor(model => model.MEDFBNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.MEDFBNo, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p> MED Item No.: </p>
        @Html.EditorFor(model => model.MEDItemNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.MEDItemNo, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p> Serial no.: </p>
        @Html.EditorFor(model => model.SerialNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.SerialNo, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6" hidden>
        <p> Survey station </p>
        @Html.EditorFor(model => model.SurveyStation, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SurveyStation, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6" hidden>
        <p> Survey date: (DD-MM-YYYY) </p>
        @Html.EditorFor(model => model.SurveyDate, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SurveyDate, "", new { @class = "text-danger" })
    </div>



    <div class="bing col-lg-6" hidden>
        Fee setter
        @Html.EditorFor(model => model.FeeSetter, new { htmlAttributes = new { @class = "form-control" } })

        @Html.EditorFor(model => model.FeeSetTime, new { htmlAttributes = new { @class = "form-control" } })

        @Html.EditorFor(model => model.TaskHandler, new { htmlAttributes = new { @class = "form-control" } })
        @Html.EditorFor(model => model.ExeDoneBy, new { htmlAttributes = new { @class = "form-control" } })

        @Html.EditorFor(model => model.ExeDoneTime, new { htmlAttributes = new { @class = "form-control" } })
        @Html.EditorFor(model => model.FeeVerifier, new { htmlAttributes = new { @class = "form-control" } })
        @Html.EditorFor(model => model.FeeVerifyTime, new { htmlAttributes = new { @class = "form-control" } })
    </div>


    <div class=" col-lg-12 ">
        <h4 style="clear:both;">Internal Approval Note:</h4>
        @Html.EditorFor(model => model.ApprNote, new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
        @Html.ValidationMessageFor(model => model.ApprNote, "", new { @class = "text-danger" })
    </div>
    <hr />
    <div class="form-group" style="clear:both;">
        <br />
        <div class="col-md-12">
            <input name="submit" type="submit" value="Save" class="btn btn-default" id="saveButton1" readonly />

            <input name="submit" value="Send to WHITEBOARD" class="btn btn-primary" style="float:right" type="submit" id="TaskComplete1" readonly />
        </div>
    </div>
    @{
        Html.RenderPartial("_PartialM1JobHiddenAttributes");
        Html.RenderPartial("_SaveCompleteReopen");

    }
</div>

}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script>

    //read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));

    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    var TargetUser;
    var BEmail;
    var taskStatus;

    //Set task parameter
    var taskNo = 3;
    var taskStatusFlag = "FeeVerifier"; //who completed the task
    var taskCompleteDate = "FeeVerifyTime";
    var taskCompleteStr = "The fee is verified by ";

    renderTaskShowHide(taskNo, taskStatusFlag, taskCompleteDate, taskCompleteStr, userSignature);
    renderTaskHandling(LUser, bm);

    $("#selectListHandler").val("WHITEBOARD");


    //show hide fields
    showHideFields();
    function showHideFields()
    {

        var defaultHiddenList = "MEDFBNo,MEDFBDue,SerialNo,CertAmount,MWL,MEDItemNo,ExistingCertNo,SurveyStation,SurveyDate".split(',');
        defaultHiddenList.forEach(hideElement);

        var toShow = "";
        console.log(Job.CertType);

        switch (Job.CertType) {

            case "MED-F":
                toShow += "MEDFBNo,MEDFBDue,SerialNo,CertAmount,MEDItemNo,SurveyStation,SurveyDate,";
                $("#pMEDFBNo").html("Ref. MED-B certificate No.");
                $("#selectCertAction").val("Initial");
                $("#selectMainProdType").val("Life-Saving appliances");
                $("#selectSubProdType").append(new Option("Module F certification", "Module F certification"));
                $("#selectSubProdType").val("Module F certification");
                //$("#SubProdType").val("Module F certification");
                break;
            case "MED-G":
                toShow += "";
                break;
            case "MED-B":
                toShow += "";
                break;
            case "TA":
                toShow += "";
                break;
            case "DVR":
                toShow += "";
                break;
            case "MED-D":
                toShow += "";
                break;
            default:
                toShow += "";
        }
        switch ($("#selectCertAction").val()) {
            case "Modification":
                toShow += "";
                break;
            case "Initial with reference":
                toShow += "";
                break;
            case "Renewal with modification":
                toShow += "";
                break;
            case "Renewal":
                toShow += "";
                break;
            default:
                toShow += "";
        }


        if (toShow) {
            var splitS = toShow.split(',');
            splitS.forEach(showElement);
        }
     }

    function showElement(value) {
        console.log("show" + value);
        if (value) {
            document.getElementById(value).parentNode.style.display = "block";
        }
    }
    function hideElement(value) {
        console.log("hide" + value);
        if (value) {
            document.getElementById(value).parentNode.style.display = "none";
        }
    }

    //$("#selectCertType").change();

    $("#selectCertType").on("change", function () {
        showHideFields()
    });
    $("#selectCertAction").on("change", function () {
        showHideFields()
    });








    //console.log(getTodayDate());

    //set up select list
    $.each(LCertType, function (key, data) {
        $("#selectCertType").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LCertAction, function (key, data) {
        $("#selectCertAction").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LMainProdType, function (key, data) {
        $("#selectMainProdType").append(new Option(data.ListItem, data.ListItem));
    });

    var mval = $("#selectMainProdType :selected").text();
      $.each(LSubProdType, function (key, data) {
        if (data.UpperLvl == mval) {
            $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
        }
    });

//When main prodtype changes, refesh the sub prod type.
    $("#selectMainProdType").on("change", function () {
        var mval = $("#selectMainProdType :selected").text();

        $('#selectSubProdType option').each(function () {
            if ($(this).val() != 'X') {
                $(this).remove();
            }
        });

        $("#selectSubProdType option").remove();
        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == mval) {
                $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
            }
        });
    });

    function SetWBasRAE() {

        $("#RAE").val("WHITEBOARD");


    }


</script>


