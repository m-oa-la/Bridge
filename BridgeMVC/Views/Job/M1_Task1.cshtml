@model BridgeMVC.Models.Job

@{
    Layout = "~/Views/Shared/_LayoutM1TaskStandard.cshtml";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    string SF = (string)Session["SendingFlag"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LMEDItemNo = ViewBag.LMEDItemNo;
    var LUser = ViewBag.LUser;
    var FinancialSet = ViewBag.FinancialSet;
}

<h2>FEE SETTING</h2>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="jobBing">
        <div class="bing col-lg-6" id="paraNpsJobId">
            <p> NPS Job ID: </p>
            <p>
                @Html.EditorFor(model => model.NpsJobId, new { htmlAttributes = new { @class = "form-control", id = "NpsJobId" } })
                @Html.ValidationMessageFor(model => model.NpsJobId, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraCustomerName">
            <p>Customer:</p>
            <p>
                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraSalesOrderNo">
            <p>Sales Order:</p>
            <p>
                @Html.EditorFor(model => model.SalesOrderNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SalesOrderNo, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraProdDesc">
            <p>Product Name:</p>
            <p>
                @Html.EditorFor(model => model.ProdDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProdDescription, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraCertType">
            <p>Deliverable:</p>
            <p>
                @Html.DropDownListFor(model => model.CertType, new List<SelectListItem> { new SelectListItem { Text = Model.CertType, Value = Model.CertType } }, new { @class = "form-control", id = "selectCertType" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraCertAction">
            <p>Issurance type:</p>
            <p>
                @Html.DropDownListFor(model => model.CertAction, new List<SelectListItem> { new SelectListItem { Text = Model.CertAction, Value = Model.CertAction } }, new { @class = "form-control", id = "selectCertAction" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraMEDItemNo">
            <p> MED Item No.: </p>
            <p>
                @Html.DropDownListFor(model => model.MEDItemNo, new List<SelectListItem> { new SelectListItem { Text = Model.MEDItemNo, Value = Model.MEDItemNo } }, new { @class = "form-control", id = "selectMEDItemNo" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraMEDFBDue">
            <p>Ref. certificate expiring date.:</p>
            <p>
                @Html.EditorFor(model => model.MEDFBDue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MEDFBDue, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraExistingCertNo">
            <p>Ref. deliverable no.:</p>
            <p>
                @Html.EditorFor(model => model.ExistingCertNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExistingCertNo, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraMainProdType">
            <p>Main Equipment category:</p>
            <p>
                @Html.DropDownListFor(model => model.MainProdType, new List<SelectListItem> { new SelectListItem { Text = Model.MainProdType, Value = Model.MainProdType } }, new { @class = "form-control", id = "selectMainProdType" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraSubProdType">
            <p>Sub Equipment category:</p>
            <p>
                @Html.DropDownListFor(model => model.SubProdType, new List<SelectListItem> { new SelectListItem { Text = Model.SubProdType, Value = Model.SubProdType } }, new { @class = "form-control", id = "selectSubProdType" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraMWL">
            <p>Maximum working load:</p>
            <p>
                @Html.EditorFor(model => model.MWL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MWL, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraCertAmount">
            <p>Amount of certificate:</p>
            <p>
                @Html.EditorFor(model => model.CertAmount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CertAmount, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraMEDFBNo">
            <p>Ref. Certificate No.:</p>
            <p>
                @Html.EditorFor(model => model.MEDFBNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MEDFBNo, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraSerialNo">
            <p> Serial no.: </p>
            <p>
                @Html.EditorFor(model => model.SerialNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SerialNo, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraSurveyStation">
            <p> Survey station </p>
            <p>
                @Html.EditorFor(model => model.SurveyStation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SurveyStation, "", new { @class = "text-danger" })
            </p>
        </div>
        <div class="bing col-lg-6" id="paraSurveyDate">
            <p>
                Survey date: (DD/MM/YYYY)
                <img onclick="viewCalendar('jcalendar_parent', 'SurveyDate')" style="margin-top: 5px;" width="20" height="20" src="~/Content/pictures/calendar-32x32.png" alt="CAL" border="0">
            </p>
            <div id="jcalendar_parent" class="jcalendar_parent" style="z-index: 999"></div>
            <input class="form-control" name="SurveyDate_Input" value="@Model.SurveyDate" id="SurveyDate_Input" readonly />
        </div>
        <div style="clear:both" ; class=" col-lg-12" id="paraModificationDesc">
            <h4 style="clear:both;">Scope of modification:</h4>
            @Html.EditorFor(model => model.ModificationDesc, new { htmlAttributes = new { @class = "form-control", style = "height:60px" } })
            @Html.ValidationMessageFor(model => model.ModificationDesc, "", new { @class = "text-danger" })
        </div>
        <iframe id="paraRuleIndex" frameborder="0" src="@Url.Content("~/Rule/Index")" style="width: 100%; height: 200px;"></iframe>
        <iframe id="paraDocReqIndex" frameborder="0" src="@Url.Content("~/DocReq/Index")" style="width: 100%; height: 200px;"></iframe>
        <div class="bing col-lg-6" id="paraFee">
            Fee (External, incl. TSA/MSA):
            @Html.EditorFor(model => model.Fee, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Fee, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6" id="paraBudgetHour">
            Budget hour: <img id="budgetHourButton"  src="~/Content/pictures/magic.png" class="magicWand" />
            @Html.EditorFor(model => model.BudgetHour, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BudgetHour, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6" id="paraDeliveryWeek">
            To be delivered in ? week(s):
            @Html.EditorFor(model => model.DeliveryWeek, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DeliveryWeek, "", new { @class = "text-danger" })
        </div>
        <br />
        <h4 style="clear:both;">Internal approval note:</h4>
        <div class=" col-lg-12 " id="paraApprNote">
            @Html.EditorFor(model => model.ApprNote, new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
            @Html.ValidationMessageFor(model => model.ApprNote, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6" hidden>
            @Html.EditorFor(model => model.FeeSetter, new { htmlAttributes = new { @class = "form-control" } })
            @Html.HiddenFor(model => model.FeeSetTime, new { htmlAttributes = new { @class = "form-control", @Value = Model.FeeSetTime?.ToString("dd-MM-yyyy HH:mm:ss") } })
            @Html.EditorFor(model => model.TaskHandler, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        @{
            Html.RenderPartial("_PartialM1JobHiddenAttributes");
            Html.RenderPartial("_SaveCompleteReopen");
            Html.RenderPartial("_TaskSending");
        }
    </div>
    @Html.ValidationSummary();
}

@section Scripts{
    <script>
    // Read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));
    var LCertType = @Html.Raw(Json.Encode(LCertType));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LMEDItemNo = @Html.Raw(Json.Encode(LMEDItemNo));
    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    // Task parameters
    var taskNo = 1;
    var taskStatusFlag = "FeeSetter"; //who completed the task
    var taskCompleteDate = "FeeSetTime";
    var taskCompleteStr = "The fee is set by ";
    // Tags
    var certTypeDropTag = "#selectCertType";
    var certActionDropTag = "#selectCertAction";
    var mainDropTag = "#selectMainProdType";
    var subDropTag = "#selectSubProdType";
    var medDropTag = "#selectMEDItemNo";
    var certTypeParaTag = "#paraCertType";
    var mainParaTag = "#paraMainProdType";
    var subParaTag = "#paraSubProdType";
    var medParaTag = "#paraMEDItemNo";
    // Initial task configuration
    renderTaskActions(taskNo, taskStatusFlag, taskCompleteDate, taskCompleteStr, userSignature);
    renderTaskHandling(LUser, bm);
    // Initialize dropdown menus
    initializeDropdownMenu(certTypeDropTag, LCertType, "CertType");
    initializeDropdownMenu(certActionDropTag, LCertAction, "ListItem");
    initializeDropdownMenu(medDropTag, LMEDItemNo, "ListItem");
    initializeDropdownMenu(mainDropTag, LMainProdType, "ListItem");
    initializeDropdownMenu(subDropTag, LSubProdType, "ListItem");
    // Initial certificate configuration
    task1CertChangeEvent(certActionDropTag, certTypeDropTag,
        mainDropTag, subDropTag, medDropTag, certTypeParaTag, medParaTag)
    // Event handlers
    $(certActionDropTag).on("change", function () {
        task1CertChangeEvent(certActionDropTag, certTypeDropTag, mainDropTag,
            subDropTag, medDropTag, certTypeParaTag, medParaTag)
    });

    $(certTypeDropTag).on("change", function () {
        task1CertChangeEvent(certActionDropTag, certTypeDropTag, mainDropTag,
            subDropTag, medDropTag, certTypeParaTag, medParaTag)
    });
    $(medDropTag).on("change", function () {
        task1MedChangeEvent(mainDropTag, subDropTag, medDropTag,
            mainParaTag, subParaTag)
    });
    $(mainDropTag).on("change", function () {
        task1MainChangeEvent(mainDropTag, subDropTag, LSubProdType, "UpperLvl");
    });
    // Budge hour button click handler
    $("#budgetHourButton").on("click", function () {
        budgetHourCallback(bm, taskNo, Job.CertType);
    });
    /*
    var mval = $("#selectMainProdType :selected").text();
    $.each(LSubProdType, function (key, data) {
        if (data.UpperLvl == mval) {
            $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
        }
    });
    // Setting up jQuery change listener for selectMainProdType
    $("#selectMainProdType").on("change", function () {
        var mval = $("#selectMainProdType :selected").text();
        $('#selectSubProdType option').each(function () {
            if ($(this).val() != 'X') {
                $(this).remove();
            }
        });
        $("#selectSubProdType option").remove();
        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == mval) {
                $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
            }
        });
    });
    */
    </script>
}

@section Styles{
}