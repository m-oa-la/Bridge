@model IEnumerable<BridgeMVC.Models.Job>

@{

    /**/

    ViewBag.Title = "Index";
    string BridgeLastUsed = (string)Session["BridgeModule"];
    string UserSignature = (string)Session["UserSignature"];

    var LUser = ViewBag.LUser;
    var US = ViewBag.userSig;
    var BFlist = (IEnumerable<BridgeMVC.Models.BFinancial>)ViewBag.LCertType;



    IDictionary<string, string> styleDict = new Dictionary<string, string>();
    styleDict.Add("Y", "background-color:seagreen; color:transparent;; cursor: pointer; ");
    styleDict.Add("N", "background-color:gainsboro; color:transparent;; cursor: pointer; ");
    styleDict.Add("TASK", "background-color:DodgerBlue; color:transparent;; cursor: pointer; ");
    styleDict.Add("Default", "background-color:gainsboro; color:transparent;; cursor: pointer; ");

    string getValuefromDict(string taskVal)
    {
        if (string.IsNullOrEmpty(taskVal))
        {
            return styleDict["Default"];
        }
        else
        {
            return styleDict[taskVal];
        }
    }

    string getColorCode(string ct)
    {
        string c = "";
        foreach (BridgeMVC.Models.BFinancial bf in BFlist)
        {
            if (bf.CertType == ct)
            {
                c = bf.ColorCode;
            }
        }

        return "background-color:" + c;
    }


}

<style>
    .hoverRow p {
        display: block;
        overflow: hidden;
        text-overflow: clip;
        white-space: nowrap;
        max-width: 480px;
    }

    .hoverRow td:hover p {
        white-space: normal;
        word-wrap: normal;
        word-break: break-all;
    }

    .table th, td {
        border-radius: 25px;
        border: 3px solid white;
    }
</style>

<h2>
    MY BRIDGE JOBLIST
    <p style="float:right" class="btn btn-secondary">
        @Html.ActionLink("Whiteboard", "Whiteboard")
    </p>
</h2>

<hr />

@using (Html.BeginForm())
{
    <table>
        <colgroup>
            <col span="1" style="width: 12%;">
            <col span="1" style="width: 76%;">
            <col span="1" style="width: 12%;">

        </colgroup>
        <tr>
            <td>
                @Html.TextBox("SearchString", null, new { @class = "form-control" })

            </td>
            <td>
                <input type="submit" value="Search" />
            </td>
            <td style="float:right">
                <select id="userSig" name="userSig" class="form-control"></select>
            </td>
            <td>
                <input type="submit" value="Change User" />
            </td>
        </tr>

    </table>

}
<br />

<table class="table table-mid-align-rows hoverRow" style="table-layout:fixed;">
    <colgroup>
        <col span="1" style="width: 20%;">
        <col span="1" style="width: 20%;">
        <col span="1" style="width: 20%;">
        <col span="1" style="width: 50px;">
        <col span="1" style="width: 50px;">
        <col span="1" style="width: 50px;">
        <col span="1" style="width: 50px;">
        <col span="1" style="width: 30%;">
        <col span="1" style="width: 50px;">
    </colgroup>
    <tr>
        <th style="border-top:none">           JOB ID       </th>
        <th style="border-top:none">            CUSTOMER        </th>
        <th style="border-top:none">           PROJECT NAME     </th>
        <th style="border-top:none">           FEE      </th>
        <th style="border-top:none">           VERI       </th>
        <th style="border-top:none">           W.B.        </th>
        <th style="border-top:none">                  </th>
        <th style="border-top:none">          IORA STATUS    </th>
        <th></th>
        @*<th>            @Html.DisplayNameFor(model => model.TaskHandler)        </th>
            <th>            @Html.DisplayNameFor(model => model.Completed)        </th>*@

    </tr>

    @foreach (var item in Model)
    {
        string npsJobName = item.NpsJobName;
        string pauseIconId = "pause_" + item.Id;
        string startIconId = "start_" + item.Id;
        string statusId = "status_" + item.Id;

        if (string.IsNullOrEmpty(npsJobName))
        {
            npsJobName = item.ProdDescription;
        }

        string ctColorCode = getColorCode(item.CertType);

        string styleT1 = getValuefromDict(item.Task1);
        string styleT2 = getValuefromDict(item.Task2);
        string styleT3 = getValuefromDict(item.Task3);
        string styleT4 = getValuefromDict(item.Task4);

        string editlink1 = "'/Job/CommonTask1/" + item.Id + "'";
        string editlink2 = "'/Job/IsIORAExisting/" + item.Id + "'";

        string editlink3 = "'/Job/CommonTask3/" + item.Id + "'";
        string editlink4 = "'/Job/CommonTask4/" + item.Id + "'";
        <tr>
            <td style="@ctColorCode">
                <p>  @Html.DisplayFor(modelItem => item.NpsJobId)</p>
            </td>
            <td>
                <p>  @Html.DisplayFor(modelItem => item.CustomerName)</p>
            </td>
            <td>
                <p>
                    @npsJobName
                </p>
            </td>

            <td style="@styleT1;" onclick="location.href=@editlink1">
                @Html.DisplayFor(modelItem => item.Task1)
            </td>
            <td style="@styleT2" onclick="location.href=@editlink2" class="T2">
                @Html.DisplayFor(modelItem => item.Task2)
            </td>
            <td style="@styleT3" onclick="location.href=@editlink3">
                @Html.DisplayFor(modelItem => item.Task3)
            </td>
            <td></td>
            <td id="@statusId">
                <p>
                    @if (!string.IsNullOrEmpty(item.OnHoldNote) && item.IsHold)
                    {
                        @item.OnHoldNote.ToUpper().Split(new[] { ';' })[0]

                    }
                    else
                    {
                        @Html.DisplayFor(modelItem => item.IoraDbId)

                    }

                </p>


            </td>
            <td>

                @if (item.IsHold)
                {
                    <img id="@startIconId" src="~/Content/pictures/Start.png" height="24" width="24" onclick="startPause(this.id)" />
                }
                else
                {
                    <img id="@pauseIconId" src="~/Content/pictures/Pause.png" height="24" width="24" onclick="startPause(this.id)" />
                }



            </td>

        </tr>
    }

</table>

<br /><br /><br />
<footer>
    @{
        string colorY = styleDict["Y"] + "width:40px;";
        string colorN = "background-color:pink; color:transparent; cursor: pointer;" + "width:40px";
        string colorTASK = styleDict["TASK"] + "width:40px";
        string colorYellow = "background-color:gold; color:transparent; cursor: pointer;" + "width:40px";
        string colorDefault = styleDict["Default"] + "width:40px";
        string styleTxt = "border-radius: 0; border: none";

    }
    <table class="table table-mid-align-rows hoverRow" style="table-layout:fixed;">

        <tr>
            <td style="@colorY"></td>
            <td style="@styleTxt">Task is completed</td>
            <td style="@colorTASK"></td>
            <td style="@styleTxt">Task is assigned to you (ongoing)</td>
            <td style="@colorN"></td>
            <td style="@styleTxt">IORA pending verification</td>
            <td style="@colorYellow"></td>
            <td style="@styleTxt">IORA pending approval / HO job</td>
            <td style="@colorDefault"></td>
            <td style="@styleTxt">Task is not assigned</td>
        </tr>
    </table>
</footer>











<script>
    var LUser = @Html.Raw(Json.Encode(LUser));
    var us = @Html.Raw(Json.Encode(US));

    console.log(LUser);

    $("#userSig").append(new Option(us, us));

    $.each(LUser, function (key, data) {
        $("#userSig").append(new Option(data.Signature, data.Signature));
    });

    function startPause(clickedId) {
        var newNote = "";
        var clickedItem = clickedId.split("_")[0];
        var jid = clickedId.split('_')[1];
        var statusid = "status_" + jid;
        document.getElementById(clickedId).style.display = 'none';
        if (clickedItem == "start")
        {
            newNote = "Resumed_on:" + formateDateNow() + " by " + us + ";";
        }
        else if (clickedItem == "pause")
        {
            newNote = "OH_from:" + formateDateNow() + " by " + us + ";";
        }
        updateOhNote(jid, newNote)
        document.getElementById(statusid).innerHTML = newNote;
    }

    function updateOhNote(jid, newNote) {
        $.ajax(
            {
                type: 'GET',
                url: '/Job/UpdateOnHoldNote',
                data: { id: jid, newNote: newNote },

                success: function (data) {

                    console.log(data);
                },
                error: function (e) {
                    alert('Error: ' + e);

                }
            });
    }


    function formateDateNow() {
        var d = new Date();

        var day = d.getDay();
        var hr = d.getHours();
        var min = d.getMinutes();
        var ss = d.getSeconds();
        if (min < 10) {
            min = "0" + min;
        }
        //var ampm = "am";
        //if (hr > 12) {
        //    hr -= 12;
        //    ampm = "pm";
        //}
        var date = d.getDate();
        var month = d.getMonth();
        var year = d.getFullYear();

        return year + '-' + month + '-' + date + ' ' + hr + ':' + min + ':00';
    }


</script>