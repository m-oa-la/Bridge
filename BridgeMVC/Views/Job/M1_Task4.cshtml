@model BridgeMVC.Models.Job

@{
    ViewBag.Title = "M1_Task1";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;

}

<style>
    .bing {
        float: left;
        /*width: 450px;*/
        padding: 0.5em 1em 0.5em 1em;
        min-width: 400px;
        font-weight: bold;
    }

    .form-control {
        font-weight: normal;
    }
</style>

<h2>
    COMPLETION

    <br />
    Job ID:
    @Html.DisplayFor(model => model.NpsJobId)
</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()
   
<div class="form-horizontal">
    <hr />

    <h4>Click the button below will close the job in BRIDGE. The spreadsheet project will also be updated.</h4>
    <div class="bing col-lg-6 h3" hidden>
        Completed:
        @Html.EditorFor(model => model.IsComplete)
        @Html.ValidationMessageFor(model => model.IsComplete, "", new { @class = "text-danger" })
        <br /><br /><br />
    </div>
    <div class="bing col-lg-6" hidden>
       
        @Html.EditorFor(model => model.JobCompletedTime, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.JobCompletedTime, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6" hidden>
        
        @Html.EditorFor(model => model.CompletedBy, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.CompletedBy, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        <div class="col-md-12">
            <input type="submit" value="Complete the job" class="btn btn-default" id="saveButton" readonly />

        </div>
    </div>
    @{
        Html.RenderPartial("_HiddenJobProperties");
    }
</div>



}
<hr />

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
@{
    Html.RenderPartial("_TaskSending");

}
<script>

    //read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));

    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    var TargetUser;
    var BEmail;
    var taskStatus;

    //Set task parameter
    var taskNo = 4;
    var taskStatusFlag = "CompletedBy";
    var taskCompleteDate = "JobCompletedTime";
    var taskCompleteStr = "The job is completed by ";

    renderTaskShowHide();
    renderTaskHandling();

    //console.log(getTodayDate());




</script>


