@model BridgeMVC.Models.Job

@{
    ViewBag.Title = "M1_Task4";
    Layout = "~/Views/Shared/_LayoutM1TaskStandard.cshtml";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;
}

<h2>
    JOB COMPLETION
    <br />
</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()

    

    <div class="form-horizontal">
        <hr />
        <div class="bing col-lg-6 ">
            Job ID:
            @Html.EditorFor(model => model.NpsJobId, 
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </div>
        <div class="bing col-lg-6 ">
            Customer Name:
            @Html.EditorFor(model => model.CustomerName, 
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </div>
        <div class="bing col-lg-6 ">
            Equipment type:
            @Html.EditorFor(model => model.SubProdType, 
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </div>
        <div class="bing col-lg-6 ">
            Product Name:
            @Html.EditorFor(model => model.ProdDescription, 
                new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        </div>
        <div class=" col-lg-12 ">
            <h4 style="clear:both;">Internal approval note:</h4>
            @Html.EditorFor(model => model.ApprNote, 
                new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
            @Html.ValidationMessageFor(model => model.ApprNote, 
                "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6 h4">
            The job is ready to be completed: &nbsp;
            @Html.EditorFor(model => model.IsComplete)
            @Html.ValidationMessageFor(model => model.IsComplete, 
                "", new { @class = "text-danger" })
            <br />
        </div>
        <div class="bing col-lg-6" hidden>
            @Html.EditorFor(model => model.JobCompletedTime, 
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.JobCompletedTime, 
                "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6" hidden>
            @Html.EditorFor(model => model.CompletedBy, 
                new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CompletedBy, 
                "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            <div class="col-md-12">
                <input type="submit" value="Complete job in Bridge" class="btn btn-danger" id="saveButton" readonly />
            </div>
        </div>
        @{
            Html.RenderPartial("_PartialM1JobHiddenAttributes");
            Html.RenderPartial("_TaskSending");
        }
    </div>
}
<hr />

@section Scripts{
<script>
    //read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));

    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    //Set task parameter
    var taskNo = 4;
    var taskStatusFlag = "CompletedBy";
    var taskCompleteDate = "JobCompletedTime";
    var taskCompleteStr = "The job is completed by ";

    console.log("M1_Task4: Lets see if renderTaskActions works...")
    renderTaskActions(taskNo, taskStatusFlag, taskCompleteDate, taskCompleteStr, userSignature);
    console.log("M1_Task4: It worked!")
    renderTaskHandling(LUser, bm);
</script>
}

@section Styles{
    <style>
        .bing {
            float: left;
            /*width: 450px;*/
            padding: 0.5em 1em 0.5em 1em;
            min-width: 400px;
            font-weight: bold;
        }

        .form-control {
            font-weight: normal;
        }

        input[type=checkbox] {
            /* Double-sized Checkboxes */
            -ms-transform: scale(2); /* IE */
            -moz-transform: scale(2); /* FF */
            -webkit-transform: scale(2); /* Safari and Chrome */
            -o-transform: scale(2); /* Opera */
            padding: 10px;
        }

        /* Might want to wrap a span around your checkbox text */
        .checkboxtext {
            /* Checkbox text */
            font-size: 110%;
            display: inline;
        }
    </style>
}