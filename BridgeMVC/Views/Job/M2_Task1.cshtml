@model BridgeMVC.Models.Job
@{
    ViewBag.Title = "M2_Task1";
    Layout = "~/Views/Shared/_LayoutM2TaskStandard.cshtml";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    string SF = (string)Session["SendingFlag"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;
    var FinancialSet = ViewBag.FinancialSet;
}
<style>
    body {
        padding: 0 3em 6em 6em;
    }

</style>

<h2>FEE SETTING</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        <div class="bing col-lg-6">
            <p> NPS Job ID: </p>
            @Html.EditorFor(model => model.NpsJobId, new { htmlAttributes = new { @class = "form-control", id = "NpsJobId" } })
            @Html.ValidationMessageFor(model => model.NpsJobId, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            <p>Customer:</p>
            @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            <p>Sales Order:</p>
            @Html.EditorFor(model => model.SalesOrderNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SalesOrderNo, "", new { @class = "text-danger" })
        </div>

        <div class="bing col-lg-6" hidden>
            <p>Product name:</p>
            @Html.EditorFor(model => model.ProdDescription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ProdDescription, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            <p>Certificate type:</p>
            @Html.DropDownListFor(model => model.CertType, new List<SelectListItem> { new SelectListItem { Text = Model.CertType, Value = Model.CertType } }, new { @class = "form-control", id = "selectCertType" })
        </div>
        <div class="bing col-lg-6">
            <p>Issuance type:</p>
            @Html.DropDownListFor(model => model.CertAction, new List<SelectListItem> { new SelectListItem { Text = Model.CertAction, Value = Model.CertAction } }, new { @class = "form-control", id = "selectCertAction" })
        </div>
        <div class="bing col-lg-6">
            <p>Ref. certificate due date.:</p>
            @Html.EditorFor(model => model.MEDFBDue, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDFBDue, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            <p>Ref. existing certificate no.:</p>
            @Html.EditorFor(model => model.ExistingCertNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ExistingCertNo, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6" hidden>
            <p>Main Equipment category:</p>
            @Html.DropDownListFor(model => model.MainProdType, new List<SelectListItem> { new SelectListItem { Text = Model.MainProdType, Value = Model.MainProdType } }, new { @class = "form-control", id = "selectMainProdType" })
        </div>
        <div class="bing col-lg-6" hidden>
            <p>Sub Equipment category:</p>
            @Html.DropDownListFor(model => model.SubProdType, new List<SelectListItem> { new SelectListItem { Text = Model.SubProdType, Value = Model.SubProdType } }, new { @class = "form-control", id = "selectSubProdType" })
        </div>

        <div class="bing col-lg-6">
            <p>Amount of certificate:</p>
            @Html.EditorFor(model => model.CertAmount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CertAmount, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            <p id="pMEDFBNo">Ref. Certificate No.:</p>
            @Html.EditorFor(model => model.MEDFBNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDFBNo, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            <p> MED Item No.: </p>
            @Html.EditorFor(model => model.MEDItemNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MEDItemNo, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            <p> Serial no.: </p>
            @Html.EditorFor(model => model.SerialNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SerialNo, "", new { @class = "text-danger" })
        </div>

        <div style="clear:both" ; class=" col-lg-12 ">
            <h4 style="clear:both;">Scope of modification:</h4>
            @Html.EditorFor(model => model.ModificationDesc, new { htmlAttributes = new { @class = "form-control", style = "height:60px" } })
            @Html.ValidationMessageFor(model => model.ModificationDesc, "", new { @class = "text-danger" })
        </div>
         <iframe id="iframe" frameborder="0" src="@Url.Content("~/Product/IndexNonePED")" style="width: 100%; height: 200px;"></iframe>

        <iframe id="iframe" frameborder="0" src="@Url.Content("~/Rule/Index")" style="width: 100%; height: 200px;"></iframe>

        <iframe id="iframe" frameborder="0" src="@Url.Content("~/DocReq/Index")" style="width: 100%; height: 200px;"></iframe>
        <div class="bing col-lg-6">
            Fee (External, incl. TSA/MSA):
            @Html.EditorFor(model => model.Fee, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Fee, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            Budget hour: <img style="cursor:pointer" src="~/Content/pictures/magic.png" onclick="budgetHourCalc()" class="magicWand">
            @Html.EditorFor(model => model.BudgetHour, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BudgetHour, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            To be delivered in ? week(s):
            @Html.EditorFor(model => model.DeliveryWeek, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DeliveryWeek, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6" hidden>
            Fee setter
            @Html.EditorFor(model => model.FeeSetter, new { htmlAttributes = new { @class = "form-control", id = "feeSetter" } })
            @Html.EditorFor(model => model.FeeSetTime, new { htmlAttributes = new { @class = "form-control", id = "feeSetTime", @Value = Model.FeeSetTime?.ToString("dd-MM-yyyy HH:mm:ss") } })
            @Html.EditorFor(model => model.TaskHandler, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <h4 style="clear:both;">External note, to be shown at chapter 'SoW' of IORA:</h4>
        <div class=" col-lg-12 ">

            @Html.EditorFor(model => model.DocReqNote, new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
            @Html.ValidationMessageFor(model => model.DocReqNote, "", new { @class = "text-danger" })
        </div>

        <div class=" col-lg-12 ">
            <h4 style="clear:both;">Internal approval note: (Not auto-included in IORA)</h4>
            @Html.EditorFor(model => model.ApprNote, new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
            @Html.ValidationMessageFor(model => model.ApprNote, "", new { @class = "text-danger" })
        </div>
        @{
            Html.RenderPartial("_PartialM1JobHiddenAttributes");
            Html.RenderPartial("_SaveCompleteReopen");

        }

        <div id="SendTaskDiv">
            @{
                Html.RenderPartial("_TaskSending");
            }

        </div>
    </div>
}
<hr />
@section Scripts {


    <script>

    //read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));

    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    var TargetUser;
    var BEmail;
    var taskStatus;

    //Set task parameter
    var taskNo = 1;
    var taskStatusFlag = "feeSetter"; //who completed the task
    var taskCompleteDate = "feeSetTime";
    var taskCompleteStr = "The draft IORA is prepared by ";

    renderTaskShowHide(taskNo, taskStatusFlag, taskCompleteDate, taskCompleteStr, userSignature)
    renderTaskHandling(LUser, bm)

    showHideFields();

    function showHideFields()
    {

        $("#TaskComplete").val("Confirm input and Draft IORA");
        document.getElementById("TaskComplete").style.width = "400px";

        var defaultHiddenList = "MEDFBNo,MEDFBDue,SerialNo,CertAmount,MEDItemNo,ExistingCertNo,ModificationDesc".split(',');
        defaultHiddenList.forEach(hideElement);

        var toShow = "";

        switch ($("#selectCertType").val())
        {
            case "MED-F":
                toShow += "MEDFBNo,MEDFBDue,SerialNo,CertAmount,MEDItemNo,SurveyStation,SurveyDate,";
                $("#pMEDFBNo").html("Ref. MED-B certificate No.");
                $("#selectCertAction").val("Initial");
                $("#selectMainProdType").val("Life-Saving appliances");
                $("#selectSubProdType").append(new Option("Module F certification", "Module F certification"));
                $("#selectSubProdType").val("Module F certification");
                //$("#SubProdType").val("Module F certification");
                break;
            case "MED-G":
                toShow += "SerialNo,MEDItemNo,";
                break;
            case "MED-B":
                toShow += "MEDItemNo,";
                break;
              case "DVR":
                toShow += "SerialNo,";
                break;
            case "MED-D":
                toShow += "";
                break;
            default:
                toShow += "";
        }

        if ($("#selectCertType").val() == "PA - TSA-funded") {
            $("#TaskComplete").val("Confirm & send job to Whiteboard");
            //$("#TaskComplete").style.backgroundColor = "pink";
        } else if ($("#selectCertType").val() == "PED" || $("#selectCertType").val() == "TPED") {
            document.getElementById("TaskComplete").style.display = "none";
        } else {
            $("#TaskComplete").val("Confirm & draft IORA");
            //$("#TaskComplete").style.backgroundColor = "darkblue";
        }


        switch ($("#selectCertAction").val()) {
            case "Initial":
                toShow += ",";
                break;
            default:
                toShow += "ExistingCertNo";
        }

        if (toShow) {
            var splitS = toShow.split(',');
            splitS.forEach(showElement);

        }
     }

    function showElement(value) {
        if (value) {
            document.getElementById(value).parentNode.style.display = "block";
        }
    }

    function hideElement(value) {
        if (value) {
            document.getElementById(value).parentNode.style.display = "none";
        }
    }

    $("#selectCertType").on("change", function () {
        showHideFields()
    });

    $("#selectCertAction").on("change", function () {
        showHideFields()
    });

    //set up select list
    $.each(LCertType, function (key, data) {

        $("#selectCertType").append(new Option(data.CertType, data.CertType));
    });

    $.each(LCertAction, function (key, data) {
        $("#selectCertAction").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LMainProdType, function (key, data) {
        $("#selectMainProdType").append(new Option(data.ListItem, data.ListItem));
    });

    var mval = $("#selectMainProdType :selected").text();
    $.each(LSubProdType, function (key, data) {
        if (data.UpperLvl == mval) {
            $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
        }
    });

    //When main prodtype changes, refesh the sub prod type.
    $("#selectMainProdType").on("change", function () {
        var mval = $("#selectMainProdType :selected").text();

        $('#selectSubProdType option').each(function () {
            if ($(this).val() != 'X') {
                $(this).remove();
            }
        });

        $("#selectSubProdType option").remove();
        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == mval) {
                $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
            }
        });
    });

    function budgetHourCalc() {

        //if ($("#selectCertType").val() + "x" == "x") {
        //    alert('The Certitication Type has to be selected first.');
        //} else {
        //    ct1 = $("#selectCertType").val();

        //    return $.ajax({
        //        type: 'GET',
        //        url: '/Job/M1_Task1_BudgetHourCalc',
        //        data: { bm_f: bm, ct_f: ct1 },
        //        cache: false,
        //        success: calcBudgetHour
        //    });
        //}

    }

    //function calcBudgetHour(data) {

    //    var f = jQuery.parseJSON(data);
    //    var dis = (1 - f.allocationFee) * (1 - f.tsa - f.msa);
    //    var feee = document.getElementById("Fee").value;;
    //    var internalFee = Math.round(feee * dis);
    //    var bh = Math.round(internalFee * 0.74 / 1200);
    //    $("#BudgetHour").val(bh);
    //    alert("External fee: " + feee +
    //        ";\nAllocation Fee: " + f.allocationFee +
    //        ";\nTSA: " + f.tsa +
    //        ";\nMSA: " + f.msa +
    //        ";\nInternal Fee: " + internalFee +
    //        ";\nBudgetHour = InternalFee * 0,74 / 1200 = " + bh);
    //}

    </script>

}