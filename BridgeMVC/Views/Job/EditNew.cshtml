@model BridgeMVC.Models.Job

@{
    Layout = "~/Views/Shared/_LayoutM1TaskStandard.cshtml";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;
}

<h2>NEW JOB</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        <div hidden>
            @Html.EditorFor(model => model.SendingFlag, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="bing col-lg-6">
            NPS Job ID:
            @Html.EditorFor(model => model.NpsJobId, new { htmlAttributes = new { @class = "form-control", id = "NpsJobId" } })
            @Html.ValidationMessageFor(model => model.NpsJobId, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            Customer:
            @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
        </div>
        <div class="bing col-lg-6">
            Sales Order:
            @Html.EditorFor(model => model.SalesOrderNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SalesOrderNo, "", new { @class = "text-danger" })
        </div>

        <div class="bing col-lg-6">
            <p>
                Job received time: (DD/MM/YYYY)
                <img onclick="viewCalendar('jcalendar_parent', 'ReceivedTime')" style="margin-top: 5px;" width="20" height="20" src="~/Content/pictures/calendar-32x32.png" alt="CAL" border="0">
            </p>
            <div id="jcalendar_parent" class="jcalendar_parent" style="z-index: 999"></div>
            <input class="form-control" name="ReceivedTime_Input" value="@Model.ReceivedTime" id="ReceivedTime_Input" readonly />
        </div>


        <div class=" col-lg-12 ">
            <h4 style="clear:both;">Internal approval note:</h4>
            @Html.EditorFor(model => model.ApprNote, new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
            @Html.ValidationMessageFor(model => model.ApprNote, "", new { @class = "text-danger" })
        </div>


        <h2 id="TaskStatus" class="col-lg-12" style="background-color:lightgray" hidden></h2>

        <div class="form-group" style="clear:both;">
            <br />
            <input type="submit" value="Save" class="btn btn-default" id="saveButton1" readonly />
            @*<input type="submit" value="SaveAndBack" class="btn  " id="saveAndBack" readonly />*@
            <div class="col-md-12" hidden>
                <input type="submit" value="Save" class="btn btn-default" id="saveButton" readonly />
                <input value="Re-open" class="btn btn-info" style="float:right" id="ReOpenTask" readonly />
                <input value="Task completed" class="btn btn-default" style="float:right" id="TaskComplete" readonly />
            </div>
        </div>

        <h4>&nbsp;</h4>
        <div class="col-lg-12">
            <hr>
            <div class="col-lg-5">
                <h3>Please select the fee-Setter:</h3>
                <select id="selectListHandler" class="form-control" name="NewHandler"></select>
            </div>
            <div class="col-lg-5" hidden>
                <h3> and new task:</h3>
                <select id="selectListTask" class="form-control" name="NewTask"></select>
            </div>
        </div>
        <h4>&nbsp;</h4>
        <input value="Send job" class="btn btn-default" id="sendJobEmail" type="submit" readonly />

        <input class="btn btn-default" value="Return to worklist" style="float:right" readonly onclick="window.location='@Url.Action("_Index", "Job")'" />
        @{
            Html.RenderPartial("_PartialM1JobHiddenAttributes");
        }


    </div>

}
<hr />

@section Scripts{
    <script>
    //Define global variables

    //read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));


    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    var TargetUser;
    var BEmail;
    var taskStatus;

    //Set task parameter

 
        renderTaskHandling(LUser, bm);

    

    </script>
}

@section Styles{
}