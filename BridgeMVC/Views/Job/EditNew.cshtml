@model BridgeMVC.Models.Job

@{
    ViewBag.Title = "M1_Task1";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;

}

<style>
    .bing {
        float: left;
        /*width: 450px;*/
        padding: 0.5em 1em 0.5em 1em;
        min-width: 400px;
        font-weight: bold;
    }

    .form-control {
        font-weight: normal;
    }

    .hiddenBtn {
        color: transparent;
        background-color: transparent;
        border: none;
        float: right;
    }
</style>

<h2>NEW JOB</h2>


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />



    @Html.HiddenFor(model => model.Tag)
    @Html.HiddenFor(model => model.BridgeModule)
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.NpsJobName)
    @*@Html.HiddenFor(model => model.NpsJobId)*@
    @Html.HiddenFor(model => model.TaskHandler)
    @Html.HiddenFor(model => model.Task1)
    @Html.HiddenFor(model => model.Task2)
    @Html.HiddenFor(model => model.Task3)
    @*@Html.HiddenFor(model => model.CustomerName)*@
    @Html.HiddenFor(model => model.ProdDescription)
    @*@Html.HiddenFor(model => model.ApprNote)*@
    @Html.HiddenFor(model => model.IsComplete)
    @*@Html.HiddenFor(model => model.SalesOrderNo)*@
    @Html.HiddenFor(model => model.SubOrderNo)
    @Html.HiddenFor(model => model.CertType)
    @Html.HiddenFor(model => model.CertAction)
    @Html.HiddenFor(model => model.MainProdType)
    @Html.HiddenFor(model => model.SubProdType)
    @*@Html.HiddenFor(model => model.ReceivedTime)*@
    @Html.HiddenFor(model => model.FeeSetTime)
    @Html.HiddenFor(model => model.IoraSentTime)
    @Html.HiddenFor(model => model.IoraReturnedTime)
    @Html.HiddenFor(model => model.JobCompletedTime)
    @Html.HiddenFor(model => model.CustomerName)
    @Html.HiddenFor(model => model.CustomerId)
    @Html.HiddenFor(model => model.Fee)
    @Html.HiddenFor(model => model.FeeSetter)
    @Html.HiddenFor(model => model.FeeVerifier)
    @Html.HiddenFor(model => model.JobVerifier)
    @Html.HiddenFor(model => model.RAE)
    @Html.HiddenFor(model => model.MWL)
    @Html.HiddenFor(model => model.ExistingCertNo)
    @Html.HiddenFor(model => model.CertNo)
    @Html.HiddenFor(model => model.SerialNo)
    @Html.HiddenFor(model => model.MEDItemNo)
    @Html.HiddenFor(model => model.DeliveryWeek)
    @Html.HiddenFor(model => model.LocalUnit)
    @Html.HiddenFor(model => model.ArchiveFolder)
    @Html.HiddenFor(model => model.IsHold)
    @Html.HiddenFor(model => model.StatusNote)
    @Html.HiddenFor(model => model.VerifyLvl)
    @Html.HiddenFor(model => model.SurveyDate)
    @Html.HiddenFor(model => model.SurveyStation)
    @Html.HiddenFor(model => model.TechPara1)
    @Html.HiddenFor(model => model.TechPara2)
    @Html.HiddenFor(model => model.TechPara3)
    @Html.HiddenFor(model => model.TechPara4)
    @Html.HiddenFor(model => model.MEDFactory)
    @Html.HiddenFor(model => model.MEDFBNo)
    @Html.HiddenFor(model => model.MEDFBDue)
    @Html.HiddenFor(model => model.AnyDesignChange)
    @Html.HiddenFor(model => model.ChecklistUsed)
    @Html.HiddenFor(model => model.DesignFolder)
    @Html.HiddenFor(model => model.IsDocQualityGood)
    @Html.HiddenFor(model => model.IsDocSufficient)
    @Html.HiddenFor(model => model.SetHoldTime)
    @Html.HiddenFor(model => model.IORASpentTime)
    @Html.HiddenFor(model => model.ModificationDesc)
    @Html.HiddenFor(model => model.OnHoldNote)
    @Html.HiddenFor(model => model.FeeVerifyTime)
    @Html.HiddenFor(model => model.RegisterTime)
    @Html.HiddenFor(model => model.DocReq)
    @Html.HiddenFor(model => model.NoOfCert)
    @Html.HiddenFor(model => model.FeeSet)
    @Html.HiddenFor(model => model.VesselID)
    @Html.HiddenFor(model => model.DocReqNote)
    @Html.HiddenFor(model => model.NpsDbId)
    @Html.HiddenFor(model => model.ExeDoneBy)
    @Html.HiddenFor(model => model.ExeDoneTime)
    @Html.HiddenFor(model => model.CompletedBy)
    @*@Html.HiddenFor(model => model.SendingFlag)*@
    @Html.HiddenFor(model => model.IoraDbId)
    @Html.HiddenFor(model => model.InternalFee)





    <div hidden>
        @Html.EditorFor(model => model.SendingFlag, new { htmlAttributes = new { @class = "form-control" } })
    </div>
    <div class="bing col-lg-6">
        NPS Job ID:
        @Html.EditorFor(model => model.NpsJobId, new { htmlAttributes = new { @class = "form-control", id = "NpsJobId" } })
        @Html.ValidationMessageFor(model => model.NpsJobId, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        Customer:
        @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        Sales Order:
        @Html.EditorFor(model => model.SalesOrderNo, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.SalesOrderNo, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        Job received time: (dd-MM-yyyy HH:mm:ss)
        @{ Html.EnableClientValidation(false); }
        @Html.EditorFor(model => model.ReceivedTime, new { htmlAttributes = new { @class = "form-control", @Value = Model.ReceivedTime?.ToString("dd-MM-yyyy HH:mm:ss") } })
        @{ Html.EnableClientValidation(true); }
    </div>


    <div class=" col-lg-12 ">
        <h4 style="clear:both;">Internal approval note:</h4>
        @Html.EditorFor(model => model.ApprNote, new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
        @Html.ValidationMessageFor(model => model.ApprNote, "", new { @class = "text-danger" })
    </div>


    <h2 id="TaskStatus" class="col-lg-12" style="background-color:lightgray" hidden></h2>

    <div class="form-group" style="clear:both;">
        <br />
        <input type="submit" value="Save" class="btn btn-default" id="saveButton1" readonly />
        @*<input type="submit" value="SaveAndBack" class="btn  " id="saveAndBack" readonly />*@
        <div class="col-md-12" hidden>
            <input type="submit" value="Save" class="btn btn-default" id="saveButton" readonly />
            <input value="Re-open" class="btn btn-info" style="float:right" id="ReOpenTask" readonly />
            <input value="Task completed" class="btn btn-default" style="float:right" id="TaskComplete" readonly />
        </div>
    </div>

    <h4>&nbsp;</h4>
    <div class="col-lg-12">
        <hr>
        <div class="col-lg-5">
            <h3>Please select the fee-Setter:</h3>
            <select id="selectListHandler" class="form-control" name="NewHandler"></select>
        </div>
        <div class="col-lg-5" hidden>
            <h3> and new task:</h3>
            <select id="selectListTask" class="form-control" name="NewTask" ></select>
        </div>
    </div>
    <h4>&nbsp;</h4>
    <input value="Send job" class="btn btn-default" id="sendJobEmail" type="submit" readonly />

    <input class="btn btn-default" value="Return to worklist" style="float:right" readonly onclick="window.location='@Url.Action("_Index", "Job")'" />


</div>
}
<hr />

@Scripts.Render("~/bundles/jqueryval")

<script>
    //Define global variables

    //read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));


    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    var TargetUser;
    var BEmail;
    var taskStatus;

    //Set task parameter
    var taskNo = 1;
    var taskStatusFlag = "FeeSetter";
    var taskCompleteDate = "FeeSetTime";
    var taskCompleteStr = "The fee is set by ";

    renderTaskShowHide();
    renderTaskHandling();

    //console.log(getTodayDate());

    //$("#Task1").val("TASK");



    //set up select list
    $.each(LCertType, function (key, data) {
        $("#selectCertType").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LCertAction, function (key, data) {
        $("#selectCertAction").append(new Option(data.ListItem, data.ListItem));
    });
    $.each(LMainProdType, function (key, data) {
        $("#selectMainProdType").append(new Option(data.ListItem, data.ListItem));
    });

    var mval = $("#selectMainProdType :selected").text();
      $.each(LSubProdType, function (key, data) {
        if (data.UpperLvl == mval) {
            $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
        }
    });


    $("#selectMainProdType").on("change", function () {
        var mval = $("#selectMainProdType :selected").text();
        //var sval = $("#selectSubProdType :selected").text();
        //$("#selectSubProdType :selected").val(sval);

        $('#selectSubProdType option').each(function () {

            if ($(this).val() != 'X') {
                $(this).remove();
            }
        });

        $("selectSubProdType option").remove();
        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == mval) {
                $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
            }
        });
    });


</script>


