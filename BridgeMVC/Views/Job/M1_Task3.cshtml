@model BridgeMVC.Models.Job

@{
    ViewBag.Title = "M1_Task1";
    string UserSignature = (string)Session["UserSignature"];
    string bridgeModule = (string)Session["BridgeModule"];
    string SF = (string)Session["SendingFlag"];

    var LCertType = ViewBag.LCertType;
    var LCertAction = ViewBag.LCertAction;
    var LMainProdType = ViewBag.LMainProdType;
    var LSubProdType = ViewBag.LSubProdType;
    var LUser = ViewBag.LUser;

}

<style>
    .bing {
        float: left;
        /*width: 450px;*/
        padding: 0.5em 1em 0.5em 1em;
        min-width: 400px;
        font-weight: bold;
  
    }

    .form-control {
        font-weight: bold;
        color: steelblue;
        
    }
</style>

<h2>FEE SETTING</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "jobForm" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />


    <div class="bing col-lg-6">
        <p> NPS Job ID: </p>
        @Html.EditorFor(model => model.NpsJobId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", id = "NpsJobId" } })
        @Html.ValidationMessageFor(model => model.NpsJobId, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Customer:</p>
        @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p>Sales Order:</p>
        @Html.EditorFor(model => model.SalesOrderNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.SalesOrderNo, "", new { @class = "text-danger" })
    </div>



    <div class="bing col-lg-6">
        <p>Designation:</p>
        @Html.EditorFor(model => model.ProdDescription, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.ProdDescription, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p>Certificate type:</p>
        @Html.EditorFor(model => model.CertType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.CertType, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p>Issurance type:</p>
        @Html.EditorFor(model => model.CertAction, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.CertAction, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Ref. certificate due date.:</p>
        @Html.EditorFor(model => model.MEDFBDue, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.MEDFBDue, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Ref. existing certificate no.:</p>
        @Html.EditorFor(model => model.ExistingCertNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.ExistingCertNo, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Main Equipment category:</p>
        @Html.EditorFor(model => model.MainProdType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.MainProdType, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Sub Equipment category:</p>
        @Html.EditorFor(model => model.SubProdType, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.SubProdType, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Maximum working load:</p>
        @Html.EditorFor(model => model.MWL, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.MWL, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p>Amount of certificate:</p>
        @Html.EditorFor(model => model.CertAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.CertAmount, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p id="pMEDFBNo">Ref. Certificate No.:</p>
        @Html.EditorFor(model => model.MEDFBNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.MEDFBNo, "", new { @class = "text-danger" })
    </div>

    <div class="bing col-lg-6">
        <p> MED Item No.: </p>
        @Html.EditorFor(model => model.MEDItemNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.MEDItemNo, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6">
        <p> Serial no.: </p>
        @Html.EditorFor(model => model.SerialNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.SerialNo, "", new { @class = "text-danger" })
    </div>





    <iframe id="iframe" frameborder="0" src="@Url.Content("~/Rule/IndexReadOnly")" style="width: 100%; height: 200px;"></iframe>

    <div class="bing col-lg-6">
        Fee (External, incl. TSA/MSA):
        @Html.EditorFor(model => model.Fee, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
        @Html.ValidationMessageFor(model => model.Fee, "", new { @class = "text-danger" })
    </div>
    <div class="bing col-lg-6" hidden>
        Fee setter
        @Html.EditorFor(model => model.FeeSetter, new { htmlAttributes = new { @class = "form-control", id = "feeSetter" } })

        @Html.EditorFor(model => model.FeeSetTime, new { htmlAttributes = new { @class = "form-control", id = "feeSetTime", @Value = Model.FeeSetTime?.ToString("yyyyMMdd HH:mm:ss") } })

        @Html.EditorFor(model => model.TaskHandler, new { htmlAttributes = new { @class = "form-control", id = "taskHandler" } })
        @Html.EditorFor(model => model.ExeDoneBy, new { htmlAttributes = new { @class = "form-control" } })

        @Html.EditorFor(model => model.ExeDoneTime, new { htmlAttributes = new { @class = "form-control" } })

    </div>


    <div class=" col-lg-12 ">
        <h4 style="clear:both;">Note:</h4>
        @Html.EditorFor(model => model.ApprNote, new { htmlAttributes = new { @class = "form-control", style = "height:100px" } })
        @Html.ValidationMessageFor(model => model.ApprNote, "", new { @class = "text-danger" })
    </div>

    @{
        Html.RenderPartial("_SaveCompleteReopen");
    }
    @{
        Html.RenderPartial("_HiddenJobProperties");
    }
</div>



}
<hr />

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@{
    Html.RenderPartial("_TaskSending");
}
<script>

    //read viewbag's info.
    var userSignature = "@UserSignature";
    var bm = "@bridgeModule";
    var Job = @Html.Raw(Json.Encode(Model));

    var LMainProdType = @Html.Raw(Json.Encode(LMainProdType));
    var LSubProdType = @Html.Raw(Json.Encode(LSubProdType));
    var LUser = @Html.Raw(Json.Encode(LUser));
    var LCertAction = @Html.Raw(Json.Encode(LCertAction));
    var LCertType = @Html.Raw(Json.Encode(LCertType));

    var TargetUser;
    var BEmail;
    var taskStatus;

    //Set task parameter
    var taskNo = 3;
    var taskStatusFlag = "ExeDoneBy"; //who completed the task
    var taskCompleteDate = "ExeDoneTime";
    var taskCompleteStr = "The job is executed by ";

    renderTaskShowHide();
    renderTaskHandling();

    //show hide fields
    showHideFields();
    function showHideFields()
    {

        var defaultHiddenList = "MEDFBNo,MEDFBDue,SerialNo,CertAmount,MWL,MEDItemNo,ExistingCertNo".split(',');
        defaultHiddenList.forEach(hideElement);

        var toShow = "";

        switch ($("#selectCertType").val())
        {
            case "MED-F":
                toShow += "MEDFBNo,MEDFBDue,SerialNo,CertAmount,MEDItemNo";
                $("#pMEDFBNo").html("Ref. MED-B certificate No.");
                $("#selectCertAction").val("Initial");
                $("#selectMainProdType").val("Life-Saving appliances");
                $("#selectSubProdType").append(new Option("Module F certification", "Module F certification"));
                $("#selectSubProdType").val("Module F certification");
                //$("#SubProdType").val("Module F certification");
                break;
            case "MED-G":
                toShow += "SerialNo,MWL,MEDItemNo,";
                break;
            case "MED-B":
                toShow += "SerialNo,MWL,MEDItemNo,";
                break;
            case "TA":
                toShow += "MWL,";
                break;
            case "DVR":
                toShow += "SerialNo,MWL,";
                break;
            case "MED-D":
                toShow += "MWL,";
                break;
            default:
                toShow += "";
        }
        switch ($("#selectCertAction").val()) {
            case "Modification":
                toShow += "ExistingCertNo,";
                break;
            case "Initial with reference":
                toShow += "ExistingCertNo,";
                break;
            case "Renewal with modification":
                toShow += "ExistingCertNo,";
                break;
            case "Renewal":
                toShow += "ExistingCertNo,";
                break;
            default:
                toShow += "";
        }


        if (toShow) {
            var splitS = toShow.split(',');
            splitS.forEach(showElement);

        }
     }

    function showElement(value) {
        if (value) {
            document.getElementById(value).parentNode.style.display = "block";
        }
    }
    function hideElement(value) {
        if (value) {
            document.getElementById(value).parentNode.style.display = "none";
        }
    }

    //$("#selectCertType").change();

    $("#selectCertType").on("change", function () {
        showHideFields()
    });
    $("#selectCertAction").on("change", function () {
        showHideFields()
    });








    //console.log(getTodayDate());

    //set up select list
    $.each(LCertType, function (key, data) {
        $("#selectCertType").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LCertAction, function (key, data) {
        $("#selectCertAction").append(new Option(data.ListItem, data.ListItem));
    });

    $.each(LMainProdType, function (key, data) {
        $("#selectMainProdType").append(new Option(data.ListItem, data.ListItem));
    });

    var mval = $("#selectMainProdType :selected").text();
      $.each(LSubProdType, function (key, data) {
        if (data.UpperLvl == mval) {
            $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
        }
    });

//When main prodtype changes, refesh the sub prod type.
    $("#selectMainProdType").on("change", function () {
        var mval = $("#selectMainProdType :selected").text();

        $('#selectSubProdType option').each(function () {
            if ($(this).val() != 'X') {
                $(this).remove();
            }
        });

        $("#selectSubProdType option").remove();
        $.each(LSubProdType, function (key, data) {
            if (data.UpperLvl == mval) {
                $("#selectSubProdType").append(new Option(data.ListItem, data.ListItem));
            }
        });
    });




</script>


