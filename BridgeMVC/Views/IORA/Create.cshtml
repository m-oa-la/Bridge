@model BridgeMVC.Models.IORA

@{
    ViewBag.Title = "Create";
}

<h2>IORA for this job does not exist. Please check the information below and create one.</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>IORA</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Tag, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Tag, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Tag, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.BridgeModule, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BridgeModule, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BridgeModule, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NpsJobID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.NpsJobID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.NpsJobID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DbJobId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DbJobId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DbJobId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SellingContactSig, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SellingContactSig, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SellingContactSig, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.BuyingContactSig, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.BuyingContactSig, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.BuyingContactSig, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<button type="button" onclick="ReadEmployeeInfo()">Change Content</button>
<div id="demo">Test</div>

<script>
    function ReadEmployeeInfo() {
        var str = "sxl";

        $.ajax({
            url: "/Job/ReadEmployeeInfo",
            type: "GET",
            //contentType: "application/json; charset=utf-8",ReadClientInfo

            data: { 'sig': str }, // `If you want to send some parameter as mentioned in action method parameter. The name of parameter should be same.`
            cache: false, //cache:true only works with GET and HEAD request. If you want to cache in the browser,then you set it true.`
            async: true, //async true means you are doing things parallel.You set async to false, when you need that ajax request to be completed before the browser passes to other codes:`
            success: function (data) {

                var obj = JSON.parse(data);

                document.getElementById("demo").innerHTML = obj.PersonNumber;
            },
            error: function () {
                document.getElementById("demo").innerHTML = "Error";
            }
        });
    }
</script>